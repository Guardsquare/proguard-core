plugins {
	id 'java'
	id 'distribution'
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'jacoco'
	id "java-test-fixtures"
	alias(libs.plugins.kotlin.plugin)
	alias(libs.plugins.test.logger)
}

dependencies {
	implementation(libs.kotlin.stdlib)
	implementation(libs.kotlin.metadata)
	implementation(libs.annotations)
	implementation(libs.bundles.log4j)
	testImplementation(libs.bundles.kotlin)
	testImplementation(libs.bundles.kotest)
	testFixturesImplementation(libs.kotlin.reflect)
	testFixturesImplementation(libs.kctfork)
	testFixturesImplementation(libs.kotest.runner.jvm) // for kotest framework
	testFixturesImplementation(libs.kotest.assertions.jvm) // for kotest core jvm assertions
	testImplementation(libs.mockk)
	testImplementation(libs.jupiter.api) // for junit framework
	testRuntimeOnly(libs.jupiter.engine) // for junit framework
	testFixturesImplementation("com.guardsquare:proguard-assembler:1.0.0")
}

jar {
	archiveBaseName = 'proguard-core'
	manifest {
		attributes('Implementation-Version': archiveVersion.get())
	}
}

// Early access automatic downloads are not yet supported:
// https://github.com/gradle/gradle/issues/14814
// But it will work if e.g. Java N-ea is pre-installed
def javaVersionsForTest = 9..23

test {
	useJUnitPlatform()
}

def testAllJavaVersions = tasks.register("testAllJavaVersions") { dependsOn(test) }

javaVersionsForTest.each {version ->

	def testVersion = tasks.register("testJava$version",Test) {
		// The version of bytebuddy used by mockk only supports Java 20 experimentally so far
		if (version == 20) systemProperty 'net.bytebuddy.experimental', true

		useJUnitPlatform()


		javaLauncher = javaToolchains.launcherFor {
			languageVersion = JavaLanguageVersion.of(version)
		}
	}
	testAllJavaVersions.configure { dependsOn(testVersion) }
}


jacocoTestReport {
	// Define which classes need to be monitored
	def sources = files(sourceSets.main.allSource.srcDirs)
	sourceDirectories.setFrom(sources)
	additionalSourceDirs.setFrom(sources)
	sourceDirectories.setFrom(sources)
	def classes = files(sourceSets.main.output.classesDirs)
	classDirectories.setFrom(classes)
	executionData.setFrom project.fileTree(dir: "$project.buildDir/jacoco", include: '*.exec')
	reports {
		xml.required = true
		csv.required = false
	}
	javaVersionsForTest.each { version ->
		mustRunAfter "testJava$version"
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId = 'proguard-core'
			from components.java
			pom {
				name = 'ProGuardCORE'
				description = 'ProGuardCORE is a free library to read, analyze, modify, and write Java class files.'
				url = 'https://guardsquare.github.io/proguard-core'
				developers {
					developer {
						id = 'lafortune'
						name = 'Eric Lafortune'
						organization = 'Guardsquare'
						organizationUrl = 'https://www.guardsquare.com/'
						roles = [
							'Project Administrator',
							'Developer'
						]
					}
				}
				licenses {
					license {
						name = 'Apache License Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution = 'repo'
					}
				}
				issueManagement {
					system = 'Github Tracker'
					url = 'https://github.com/Guardsquare/proguard-core/issues'
				}
				scm {
					url = 'https://github.com/Guardsquare/proguard-core.git'
					connection = 'scm:git:https://github.com/Guardsquare/proguard-core.git'
				}
				properties = [
					'project.build.sourceEncoding': 'UTF-8'
				]
			}
			repositories {
				maven {
					name = 'Github'
					url = uri('https://maven.pkg.github.com/guardsquare/proguard-core')
					credentials {
						username = project.findProperty('PROGUARD_GITHUB_USERNAME')
						password = project.findProperty('PROGUARD_GITHUB_TOKEN')
					}
				}
			}
		}
	}
}

// We use in-memory ascii-armored keys
// See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
if (hasProperty('PROGUARD_SIGNING_KEY')) {
	signing {
		String key = findProperty('PROGUARD_SIGNING_KEY')
		String password = findProperty('PROGUARD_SIGNING_PASSWORD')
		useInMemoryPgpKeys(key, password)
		sign publishing.publications
	}
}
