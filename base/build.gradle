plugins {
    id 'java'
    id 'distribution'
    id 'java-library'
    id "org.jetbrains.kotlin.jvm"
    id 'maven-publish'
    id 'signing'
    id 'com.adarshr.test-logger'
    id 'de.jansauer.printcoverage'
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint"
    id "java-test-fixtures"
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    api "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}"
    api "org.jetbrains.kotlinx:kotlinx-metadata-jvm:${kotlinxMetadataVersion}"

    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    testFixturesImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    testFixturesImplementation 'com.github.tschuchortdev:kotlin-compile-testing:1.4.9'
    testFixturesImplementation 'io.kotest:kotest-runner-junit5-jvm:5.5.0' // for kotest framework
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.5.0' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.5.0' // for kotest core jvm assertions
    testFixturesImplementation 'io.kotest:kotest-assertions-core-jvm:5.5.0' // for kotest core jvm assertions

    testImplementation 'io.kotest:kotest-property-jvm:5.5.0' // for kotest property test
    testImplementation 'io.kotest:kotest-framework-datatest:5.5.0'
    testImplementation 'io.mockk:mockk:1.13.2' // for mocking
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0' // for junit framework
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0' // for junit framework

    testFixturesImplementation("com.guardsquare:proguard-assembler:1.0.0")
}

jar {
    archiveBaseName = 'proguard-core'
    manifest {
        attributes('Implementation-Version': archiveVersion.get())
    }
}

// Early access automatic downloads are not yet supported:
// https://github.com/gradle/gradle/issues/14814
// But it will work if e.g. Java N-ea is pre-installed
def javaVersionsForTest = 9..19

test {
    useJUnitPlatform()
}

task testAllJavaVersions() { testAllTask ->
    dependsOn(test) // the usual test runs on Java 8

    javaVersionsForTest.each {version ->
        task("testJava$version", type: Test) {

            // The version of bytebuddy used by mockk only supports Java 19 experimentally so far
            if (version == 19) systemProperty 'net.bytebuddy.experimental', true

            useJUnitPlatform()

            testAllTask.dependsOn(it)

            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(version)
            }
        }
    }
}

jacocoTestReport {
    // Define which classes need to be monitored
    def sources = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom(sources)
    additionalSourceDirs.setFrom(sources)
    sourceDirectories.setFrom(sources)
    def classes = files(sourceSets.main.output.classesDirs)
    classDirectories.setFrom(classes)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'proguard-core'
            from components.java
            pom {
                name = 'ProGuardCORE'
                description = 'ProGuardCORE is a free library to read, analyze, modify, and write Java class files.'
                url = 'https://guardsquare.github.io/proguard-core'
                developers {
                    developer {
                        id = 'lafortune'
                        name = 'Eric Lafortune'
                        organization = 'Guardsquare'
                        organizationUrl = 'https://www.guardsquare.com/'
                        roles = ['Project Administrator', 'Developer']
                    }
                }
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                issueManagement {
                    system = 'Github Tracker'
                    url = 'https://github.com/Guardsquare/proguard-core/issues'
                }
                scm {
                    url = 'https://github.com/Guardsquare/proguard-core.git'
                    connection = 'scm:git:https://github.com/Guardsquare/proguard-core.git'
                }
                properties = [
                        'project.build.sourceEncoding': 'UTF-8'
                ]
            }
            repositories {
                maven {
                    name = 'Github'
                    url = uri('https://maven.pkg.github.com/guardsquare/proguard-core')
                    credentials {
                        username = project.findProperty('PROGUARD_GITHUB_USERNAME')
                        password = project.findProperty('PROGUARD_GITHUB_TOKEN')
                    }
                }
            }
        }
    }
}

// We use in-memory ascii-armored keys
// See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
if (hasProperty('PROGUARD_SIGNING_KEY')) {
    signing {
        String key = findProperty('PROGUARD_SIGNING_KEY')
        String password = findProperty('PROGUARD_SIGNING_PASSWORD')
        useInMemoryPgpKeys(key, password)
        sign publishing.publications
    }
}
