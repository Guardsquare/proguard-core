plugins {
    id 'distribution'
    id 'java-library'
    id "org.jetbrains.kotlin.jvm"
    id 'maven-publish'
    id 'signing'
    id 'com.adarshr.test-logger'
    id 'de.jansauer.printcoverage'
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint"
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    api "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}"
    api "org.jetbrains.kotlinx:kotlinx-metadata-jvm:${kotlinxMetadataVersion}"

    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    testImplementation 'com.github.tschuchortdev:kotlin-compile-testing:1.4.9'
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.3.1' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.3.1' // for kotest core jvm assertions
    testImplementation 'io.kotest:kotest-property-jvm:5.3.1' // for kotest property test
    testImplementation 'io.kotest:kotest-framework-datatest:5.3.1'
    testImplementation "io.mockk:mockk:1.12.4" // for mocking
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1' // for junit framework
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1' // for junit framework

    // For assembling ProGuard assembler snippets
    testImplementation ('com.github.Guardsquare:proguard-assembler:master-SNAPSHOT') {
        exclude group: 'com.guardsquare', module: 'proguard-core'
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }

    withSourcesJar()
    withJavadocJar()
}

// Early access automatic downloads are not yet supported:
// https://github.com/gradle/gradle/issues/14814
// But it will work if e.g. Java 17-ea is pre-installed
def javaVersionsForTest = 9..17

test {
    useJUnitPlatform()
}

task testAllJavaVersions() { testAllTask ->
    dependsOn(test) // the usual test runs on Java 8

    javaVersionsForTest.each {version ->
        task("testJava$version", type: Test) {
            useJUnitPlatform()
            ignoreFailures = true

            testAllTask.dependsOn(it)

            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(version)
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

jacocoTestReport {
    // Define which classes need to be monitored
    def sources = files(rootProject.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom(sources)
    additionalSourceDirs.setFrom(sources)
    sourceDirectories.setFrom(sources)
    def classes = files(rootProject.sourceSets.main.output.classesDirs)
    classDirectories.setFrom(classes)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}