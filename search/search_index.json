{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>ProGuardCORE is a free library to read, analyze, modify, and write Java class files. It is the core of the well-known shrinker, optimizer, and obfuscator ProGuard and of the ProGuard Assembler and Disassembler.</p> <p>Typical applications:</p> <ul> <li>Perform peephole optimizations in Java bytecode.</li> <li>Search for instruction patterns.</li> <li>Analyze code with abstract evaluation.</li> <li>Optimize and obfuscate, like ProGuard itself.</li> </ul>"},{"location":"index.html#design","title":"Design","text":"<p>The library defines many small classes as the building blocks for applications that contain the processing logic. This is sometimes taken to the extreme: even loops and conditional statements can often be implemented as separate classes. Even though these classes are verbose and repetitive, the resulting main code becomes much more compact, flexible, and robust.</p>"},{"location":"index.html#data-classes","title":"Data classes","text":"<p>Basic data classes define the structures to represent Java bytecode. They reflect the Java bytecode specifications literally, to ensure that no data are lost when reading, analyzing, and writing them. The data classes contain only a minimum number of methods. They do have one or more accept methods to let the visitor classes below operate on them.</p>"},{"location":"index.html#visitor-classes","title":"Visitor classes","text":"<p>The library applies the visitor pattern extensively. Visitor classes define the operations on the data: reading, writing, editing, transforming, analyzing, etc. The visitor classes have one or more 'visit' methods to operate on data classes of the same basic type.</p> <p>For example, a Java bytecode class contains a constant pool with constants of different types: integer constants, float constants, string constants, etc. The data classes IntegerConstant, FloatConstant, StringConstant, etc. all implement the basic type Constant. The visitor interface ConstantVisitor contains methods 'visitIntegerConstant', 'visitFloatConstant', 'visitStringConstant', etc. Implementations of this visitor interface can perform all kinds of operations on the constants.</p> <p>The reasoning behind this pattern is that the data classes are very stable, because they are directly based on the bytecode specifications. The operations are more dynamic, since they depend on the final application. It is practically impossible to add all possible operations in the data classes, but it is easy to add another implementation of a visitor interface. Implementing an interface in practice helps a lot to think of all possible cases.</p> <p>The visitor pattern uses visitor interfaces to operate on the similar elements of a data structure. Each interface often has many implementations. A great disadvantage at this time is that visitor methods can invoke one another (directly or indirectly), but they can't communicate easily. Since the implementations can't add their own parameters or return values, they often have to rely on fields to pass values back and forth. This is more error-prone. Still, the advantages of the visitor pattern outweigh the disadvantages.</p>"},{"location":"index.html#dependency-injection","title":"Dependency injection","text":"<p>The library classes heavily use constructor-based dependency injection, to create immutable instances. Notably the visitor classes are often like commands that are combined in an immutable structure, via constructors. You can execute such commands by applying the visitors to the data classes.</p>"},{"location":"index.html#api","title":"API","text":"<p>You can find the complete API in the ProGuardCORE javadoc.</p>"},{"location":"building.html","title":"Building","text":"<p>If you've downloaded the source code of the ProGuardCORE library, you can build it yourself with Gradle:</p> <ul> <li> <p>Build the artifacts:</p> <pre><code>./gradlew assemble\n</code></pre> </li> <li> <p>Publish the artifacts to your local Maven cache (something like <code>~/.m2/</code>):</p> <pre><code>./gradlew publishToMavenLocal\n</code></pre> </li> <li> <p>Build tar and zip archives with the binaries and documentation:</p> <pre><code>./gradlew distTar distZip\n</code></pre> </li> <li> <p>Build the complete API documentation with</p> <pre><code>./gradlew javadoc\n</code></pre> </li> </ul> <p>You can then find the API documentation in <code>docs/md/api</code>.</p>"},{"location":"creating.html","title":"Creating classes","text":"<p>The easiest way to create a new class from scratch is with ClassBuilder. It provides a fluent API to add fields and methods. For example, to create a class that prints out \"Hello, world!\":</p> <pre><code>ProgramClass programClass =\nnew ClassBuilder(\nVersionConstants.CLASS_VERSION_1_8,\nAccessConstants.PUBLIC,\n\"HelloWorld\",\nClassConstants.NAME_JAVA_LANG_OBJECT)\n\n.addMethod(\nAccessConstants.PUBLIC |\nAccessConstants.STATIC,\n\"main\",\n\"([Ljava/lang/String;)V\",\n50,\n\ncode -&gt; code\n.getstatic(\"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n.ldc(\"Hello, world!\")\n.invokevirtual(\"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\")\n.return_())\n\n.getProgramClass();\n</code></pre> <p>You can also use it to add fields and methods to an existing class:</p> <pre><code>ProgramClass programClass =\nnew ClassBuilder(existingClass)\n.....\n</code></pre> <p>Complete example: CreateHelloWorldClass.java</p>"},{"location":"downloads.html","title":"Downloads","text":"<p>The ProGuardCORE library is distributed under the terms of the Apache License Version 2.0. Please consult the license page for more details.</p> <p>ProGuardCORE is written in Java, so it requires a Java Runtime Environment (JRE 1.8 or higher).</p> <p>You can download the library in various forms:</p> <ul> <li> <p>Pre-built artifacts at Maven Central</p> <pre><code>dependencies {\ncompile project(':com.guardsquare:proguard-core:9.0.0')\n}\n</code></pre> <p>or</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.guardsquare&lt;/groupId&gt;\n&lt;artifactId&gt;proguard-core&lt;/artifactId&gt;\n&lt;version&gt;9.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>A Git repository of the source code at Github</p> <pre><code>git clone https://github.com/Guardsquare/proguard-core.git\n</code></pre> </li> </ul> <p>You can find major releases, minor releases with important bug fixes, and beta releases with the latest new features and any less urgent bug fixes.</p> <p>If you're still working with an older version of the library, check out the release notes, to see if you're missing something essential.</p>"},{"location":"editing.html","title":"Editing classes","text":""},{"location":"editing.html#editing-classes","title":"Editing classes","text":"<p>You can edit existing classes with ClassEditor and related editors like InterfacesEditor, AttributesEditor, and ConstantPoolEditor.</p> <pre><code>ClassEditor classEditor =\nnew ClassEditor(targetClass);\n\nclassEditor.addField(field);\n\nclassEditor.addMethod(method);\n</code></pre> <p>If you want to create and add new fields or methods from scratch, you can use the more convenient ClassBuilder:</p> <pre><code>ProgramClass programClass =\nnew ClassBuilder(existingClass)\n.addField(\nAccessConstants.PUBLIC |\nAccessConstants.STATIC,\n\"someField\",\nTypeConstants.INT);\n\n.addMethod(\nAccessConstants.PUBLIC |\nAccessConstants.STATIC,\n\"main\",\n\"([Ljava/lang/String;)V\",\n50,\n\ncode -&gt; code\n.getstatic(\"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n.ldc(\"Hello, world!\")\n.invokevirtual(\"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\")\n.return_())\n\n.getProgramClass();\n</code></pre>"},{"location":"editing.html#editing-code","title":"Editing code","text":"<p>Perhaps more interestingly, you can edit the bytecode of method bodies with CodeAttributeEditor.</p> <pre><code>CodeAttributeEditor codeAttributeEditor =\nnew CodeAttributeEditor();\n\nInstructionSequenceBuilder builder =\nnew InstructionSequenceBuilder(targetClass);\n\nInstructions[] replacementInstructions = builder\n.getstatic(\"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n.ldc(\"Hello\")\n.invokevirtual(\"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\"        .instructions();\n\n// Prepare the editor for this code.\ncodeAttributeEditor.reset(codeAttribute.u4codeLength);\n\n// Insert the instruction sequence before a specified offset.\ncodeAttributeEditor.insertBeforeOffset(offset, replacementInstructions);\n\n// Apply the changes.\ncodeAttributeEditor.visitCodeAttribute(clazz, method, codeAttribute);\n</code></pre>"},{"location":"kotlin.html","title":"Kotlin metadata","text":"<p>The library makes it easy to read, write and modify the Kotlin metadata that is attached to Java classes. The following example prints all the names of Kotlin functions in the metadata attached to the Java class <code>Foo</code>:</p> <pre><code>programClassPool.classesAccept(\nnew ClassNameFilter(\"Foo\",\nnew ReferencedKotlinMetadataVisitor(\nnew AllFunctionsVisitor(\n(clazz, container, function) -&gt; System.out.println(function.name)))));\n</code></pre>"},{"location":"kotlin.html#initializing-the-kotlin-metadata-model","title":"Initializing the Kotlin metadata model","text":"<p>There are two ways to initialize the Kotlin metadata model:</p> <ul> <li>While reading classes with <code>ClassReader</code> by setting <code>includeKotlinMetadata</code> to <code>true</code>.</li> <li>After class reading using <code>KotlinMetadataInitializer</code>.</li> </ul>"},{"location":"kotlin.html#kotlinmetadatainitializer","title":"<code>KotlinMetadataInitializer</code>","text":"<p>The <code>KotlinMetadataInitializer</code> can be used as a <code>ClassVisitor</code> which will read the Kotlin metadata from the <code>kotlin.Metadata</code> annotation on program classes (<code>ProgramClass</code>) and  automatically initialize the metadata model on visited classes:</p> <pre><code>BiConsumer&lt;Clazz, String&gt; errorHandler = (clazz, message) -&gt; System.err.println(message);\nprogramClassPool.classesAccept(new KotlinMetadataInitializer(errorHandler));\n</code></pre> <p>Alternatively, the <code>initialize(Clazz, int, int[], String[], String[], int, String, String)</code> can be called directly with a <code>Clazz</code> and the components making up the <code>kotlin.Metadata</code> annotation:</p> <pre><code>BiConsumer&lt;Clazz, String&gt; errorHandler\n= (clazz, message) -&gt; System.err.println(message);\nKotlinMetadataInitializer initializer\n= new KotlinMetadataInitializer(errorHandler);\nprogramClassPool.classesAccept(\nclazz -&gt; {\n// get the values for k, mv, d1, d2, xi, xs, pn to provide to the initializer\ninitializer.initialize(clazz, k, mv, d1, d2, xi, xs, pn);\n}\n);\n</code></pre> <p>This is useful for initializing the model on library classes (<code>LibraryClass</code>), since the library class model doesn't contain  all the necessary information to automatically extract these parameters.</p>"},{"location":"kotlin.html#initializing-references","title":"Initializing references","text":"<p>Once the model itself is initialized by <code>KotlinMetadataInitializer</code>, like the <code>Clazz</code> model, references must be initialized. This is done by the <code>ClassReferenceInitializer</code>:</p> <pre><code>// First build the model\nBiConsumer&lt;Clazz, String&gt; errorHandler = (clazz, message) -&gt; System.err.println(message);\nprogramClassPool.classesAccept(new KotlinMetadataInitializer(errorHandler));\n// Then initialize the references\nprogramClassPool.classesAccept(\nnew ClassReferenceInitializer(programClassPool, libraryClassPool)\n);\n</code></pre>"},{"location":"license.html","title":"License","text":"<p>The ProGuardCORE library is licensed under the Apache License Version 2.0.</p> <p>Copyright 2002-2020 Guardsquare NV</p> <pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"partialevaluator.html","title":"Data flow analysis with partial evaluation","text":""},{"location":"partialevaluator.html#analyzing-all-instructions","title":"Analyzing all instructions","text":"<p>If you want to analyze bytecode, you'll probably want to visit specified instructions of specified code attributes of specified methods of specified classes. The visitor classes and filters quickly get you to the right place:</p> <pre><code>programClassPool.classesAccept(\nnew AllMethodVisitor(\nnew AllAttributeVisitor(\nnew AllInstructionVisitor(\nnew MyInstructionAnalyzer()))));\n</code></pre> <p>You then only need to implement the visitor methods to analyze the instructions:</p> <pre><code>class      MyInstructionAnalyzer\nimplements InstructionVisitor\n{\npublic void visitSimpleInstruction(Clazz clazz, .....) ...\npublic void visitVariableInstruction(Clazz clazz, .....) ...\npublic void visitConstantInstruction(Clazz clazz, .....) ...\npublic void visitBranchInstruction(Clazz clazz, .....) ...\npublic void visitTableSwitchInstruction(Clazz clazz, .....) ...\npublic void visitLookUpSwitchInstruction(Clazz clazz, .....) ...\n}\n</code></pre> <p>The library already provides classes to analyze the code for you, finding branching information, performing partial evaluation, finding the control flow and data flow, etc, as introduced in the following sections.</p> <p>Complete example: EvaluateReturnValues.java</p>"},{"location":"partialevaluator.html#branching","title":"Collecting basic branching information","text":"<p>You can extract basic information about branches in a method with the class BranchTargetFinder. The results are defined at the instruction level: each instruction is properly labeled as a branch target, branch origin, exception handler, etc.</p> <pre><code>BranchTargetFinder branchTargetFinder =\nnew BranchTargetFinder();\n\nbranchTargetFinder.visitCodeAttribute(clazz, method, codeAttribute);\n\nif (branchTargetFinder.isBranchOrigin(offset)) ...\n\nif (branchTargetFinder.isBranchTarget(offset)) ...\n</code></pre> <p>Complete example: ApplyPeepholeOptimizations.java</p>"},{"location":"partialevaluator.html#partial-evaluation","title":"Partial evaluation","text":"<p>You can extract more information about the code with partial evaluation (often called abstract evaluation or symbolic evaluation). Its analysis provides a global view of the control flow and data flow in a method.</p> <p>The core class is PartialEvaluator. It can work at different levels of precision \u2014 the more abstract, the less precise. You can control the precision with different value factories and different invocation units:</p> <ul> <li> <p>A ValueFactory defines the level of detail in representing values like   integers or reference types. The values can be very abstract (any primitive   integer, a reference to any object) or more precise (the integer 42, or an   integer between 0 and 5, or a non-null reference to an instance of   java/lang/String).</p> </li> <li> <p>An InvocationUnit defines the values returned from retrieved fields and   invoked methods. The values can again be very generic (any integer) or they   can also be values that were cached in prior evaluations of the code base.</p> </li> </ul> <p>Complete example: EvaluateCode.java, which provides options to analyze code with different levels of precision. It prints out its results in markdown format, which is also used in the examples below.</p>"},{"location":"partialevaluator.html#control-flow-analysis","title":"Control flow analysis","text":"<p>You can set up basic evaluation with a BasicValueFactory and a BasicInvocationUnit:</p> <pre><code>ValueFactory     valueFactory     = new BasicValueFactory();\nInvocationUnit   invocationUnit   = new BasicInvocationUnit(valueFactory);\nPartialEvaluator partialEvaluator = new PartialEvaluator(valueFactory,\ninvocationUnit,\nfalse);\n</code></pre> <p>The analysis provides a control flow graph of the instructions in a method. Each instruction is labeled with potential branch targets and branch origins:</p> <pre><code>InstructionOffsetValue branchOrigins = partialEvaluator.branchOrigins(offset));\nInstructionOffsetValue branchTargets = partialEvaluator.branchTargets(offset));\n</code></pre> <p>Complete example: VisualizeControlFlow.java</p>"},{"location":"partialevaluator.html#data-flow-analysis","title":"Data flow analysis","text":"<p>You can also inspect the data flow between the instructions in a method by looking at the stack and the local variables:</p> <pre><code>TracedStack     stack     = partialEvaluator.getStackAfter(offset);\nTracedVariables variables = partialEvaluator.getVariablesAfter(offset);\n</code></pre> <p>Consider the following code:</p> <pre><code>public static int getAnswer()\n{\nint f1 = 6;\nint f2 = 7;\n\nreturn f1 * f2;\n}\n</code></pre> <p>Applying the above partial evaluator to this code yields this overall result:</p> Instruction Stack v0 v1 [0] bipush 6 [0:i] empty empty [2] istore_0 v0 2:i empty [3] bipush 7 [3:i] 2:i empty [5] istore_1 v1 2:i 5:i [6] iload_0 v0 [6:i] 2:i 5:i [7] iload_1 v1 [6:i] [7:i] 2:i 5:i [8] imul [8:i] 2:i 5:i [9] ireturn 2:i 5:i <p>Each integer value followed by a colon indicates the offset of the instruction that stored or pushed the value. Each 'i' indicates an unknown primitive integer value.</p> <p>Useful applications: dependency analysis at an instruction level, for example to remove unused instructions.</p> <p>Complete example: EvaluateCode.java</p>"},{"location":"partialevaluator.html#numerical","title":"More precise numerical evaluation","text":"<p>The above basic evaluation doesn't tell you much about any numerical results. You can set up more precise numerical evaluation with a ParticularValueFactory:</p> <pre><code>ValueFactory     valueFactory     = new ParticularValueFactory(new BasicValueFactory());\nInvocationUnit   invocationUnit   = new BasicInvocationUnit(valueFactory);\nPartialEvaluator partialEvaluator = new PartialEvaluator(valueFactory,\ninvocationUnit,\nfalse);\n</code></pre> <p>For the same code as in the previous section:</p> Instruction Stack v0 v1 [0] bipush 6 [0:6] empty empty [2] istore_0 v0 2:6 empty [3] bipush 7 [3:7] 2:6 empty [5] istore_1 v1 2:6 5:7 [6] iload_0 v0 [6:6] 2:6 5:7 [7] iload_1 v1 [6:6] [7:7] 2:6 5:7 [8] imul [8:42] 2:6 5:7 [9] ireturn 2:6 5:7 <p>In this trivial example, the previously unknown integers are now all concrete values. The last instruction pops the computed result 42 from the stack and returns it.</p> <p>Useful application: constant propagation.</p>"},{"location":"partialevaluator.html#range","title":"Evaluation with numeric ranges","text":"<p>Consider the following code:</p> <pre><code>public static int getAnswer()\n{\nint answer = 0;\nfor (int counter = 0; counter &lt; 3 &amp;&amp; Math.random() &lt; 0.5f; counter++)\n{\nanswer += 14;\n}\n\nreturn answer;\n}\n</code></pre> <p>The possible answer isn't a single value. You can let the evaluation work with integer ranges with a RangeValueFactory:</p> <pre><code>ValueFactory     valueFactory     = new RangeValueFactory(new ArrayReferenceValueFactory(), new BasicValueFactory());\nInvocationUnit   invocationUnit   = new BasicInvocationUnit(valueFactory);\nPartialEvaluator partialEvaluator = new PartialEvaluator(valueFactory,\ninvocationUnit,\nfalse);\n</code></pre> <p>The overall result of the analysis of the sample method is:</p> Instruction Stack v0 v1 [0] iconst_0 [0:0] empty empty [1] istore_0 v0 1:0 empty [2] iconst_0 [2:0] 1:0 empty [3] istore_1 v1 1:0 3:0 [4] iload_1 v1 [4:0..3] 1,19:0..42 3,22:0..3 [5] iconst_3 [4:0..3] [5:3] 1,19:0..42 3,22:0..3 [6] if_icmpge +22 (target=28) 1,19:0..42 3,22:0..3 [9] invokestatic #2 [9:T] [9:d] 1,19:0..28 3,22:0..2 [12] ldc2_w #3 [9:T] [9:d] [12:T] [12:0.5d] 1,19:0..28 3,22:0..2 [15] dcmpg [15:i] 1,19:0..28 3,22:0..2 [16] ifge +12 (target=28) 1,19:0..28 3,22:0..2 [19] iinc v0, 14 19:14..42 3,22:0..2 [22] iinc v1, 1 19:14..42 22:1..3 [25] goto -21 (target=4) 19:14..42 22:1..3 [28] iload_0 v0 [28:0..42] 1,19:0..42 3,22:0..3 [29] ireturn 1,19:0..42 3,22:0..3 <p>Not all values are entirely concrete; they can have a range (with \"..\"). The method can return a value between 0 and 42.</p> <p>Useful applications: simplification of range checks.</p>"},{"location":"partialevaluator.html#symbolic","title":"Symbolic numerical evaluation","text":"<p>Consider the following code:</p> <pre><code>private static int getAnswer(int a, int b)\n{\nreturn 2 * a + b;\n}\n</code></pre> <p>The numerical evaluation of the previous sections doesn't get you very far, since the parameters are unknown, so all computations produce unknown values:</p> Instruction Stack v0 v1 [0] iconst_2 [0:2] P0:i P1:i [1] iload_0 v0 [0:2] [1:i] P0:i P1:i [2] imul [2:i] P0:i P1:i [3] iload_1 v1 [2:i] [3:i] P0:i P1:i [4] iadd [4:i] P0:i P1:i [5] ireturn P0:i P1:i <p>You can set up symbolic evaluation with an IdentifiedValueFactory:</p> <pre><code>ValueFactory     valueFactory     = new IdentifiedValueFactory();\nInvocationUnit   invocationUnit   = new BasicInvocationUnit(valueFactory);\nPartialEvaluator partialEvaluator = new PartialEvaluator(valueFactory,\ninvocationUnit,\nfalse);\n</code></pre> <p>The overall result of the analysis of the sample method is:</p> Instruction Stack v0 v1 [0] iconst_2 [0:2] P0:i0 P1:i1 [1] iload_0 v0 [0:2] [1:i0] P0:i0 P1:i1 [2] imul [2:(2*i0)] P0:i0 P1:i1 [3] iload_1 v1 [2:(2*i0)] [3:i1] P0:i0 P1:i1 [4] iadd [4:((2*i0)+i1)] P0:i0 P1:i1 [5] ireturn P0:i0 P1:i1 <p>The unknown values now have symbolic names (IDs): \"i0\" and \"i1\". Any computations result in symbolic expressions, such as \"((2*i0)+i1)\".</p> <p>Useful applications: a basis for symbolic simplification, static single assignment, further analysis with SMT solvers (satisfiability modulo theories).</p>"},{"location":"partialevaluator.html#tracing","title":"Evaluation with reference types","text":"<p>The previous sections only showed examples with primitive types. Consider the following code with reference types:</p> <pre><code>public static Number getAnswer(Number answer)\n{\nif (answer == null)\n{\nanswer = new Integer(42);\n}\n\nreturn answer;\n}\n</code></pre> <p>The basic or numeric evaluation of the previuous sections don't tell much about the non-primitive types:</p> Instruction Stack v0 [0] aload_0 v0 [0:a] P0:a [1] ifnonnull +13 (target=14) P0:a [4] new #2 [4:a] P0:a [7] dup [4:7:a] [4:7:a] P0:a [8] bipush 42 [4:7:a] [4:7:a] [8:42] P0:a [10] invokespecial #3 [4:7:a] P0:a [13] astore_0 v0 13:a [14] aload_0 v0 [14:a] P0,13:a [15] areturn P0,13:a <p>Unknown reference types are shown as \"a\".</p> <p>You can keep track of origins of references in more detail with a ReferenceTracingValueFactory and a ReferenceTracingInvocationUnit. The PartialEvaluator is set up slightly differently from the earlier examples:</p> <pre><code>ReferenceTracingValueFactory valueFactory     = new ReferenceTracingValueFactory(new BasicValueFactory()) :\nInvocationUnit               invocationUnit   = new ReferenceTracingInvocationUnit(new BasicInvocationUnit(valueFactory));\nPartialEvaluator             partialEvaluator = new PartialEvaluator(valueFactory,\ninvocationUnit,\nfalse,\nvalueFactory);\n</code></pre> <p>The results then show the origins of non-primitive types:</p> Instruction Stack v0 [0] aload_0 v0 [0:P0:a] P0:P0:a [1] ifnonnull +13 (target=14) P0:P0:a [4] new #2 [4:N4:a] P0:P0:a [7] dup [4:7:N4:a] [4:7:N4:a] P0:P0:a [8] bipush 42 [4:7:N4:a] [4:7:N4:a] [8:i] P0:P0:a [10] invokespecial #3 [4:7:N4:a] P0:P0:a [13] astore_0 v0 13:N4:a [14] aload_0 v0 [14:N4,P0:a] P0,13:N4,P0:a [15] areturn P0,13:N4,P0:a <p>For example, the method pops and returns either a new instance (\"N4\") that was created at offset 4, or parameter 0 (\"P0\").</p> <p>Useful applications: define/use analysis, a basis for escape analysis or taint analysis.</p>"},{"location":"partialevaluator.html#typed","title":"Evaluation with more precise reference types","text":"<p>You can keep track of non-primitive types in more detail with a TypedReferenceValueFactory:</p> <pre><code>ValueFactory     valueFactory     = new TypedReferenceValueFactory();\nInvocationUnit   invocationUnit   = new BasicInvocationUnit(valueFactory);\nPartialEvaluator partialEvaluator = new PartialEvaluator(valueFactory,\ninvocationUnit,\nfalse);\n</code></pre> <p>The results then show the types:</p> Instruction Stack v0 [0] aload_0 v0 [0:Ljava/lang/Number;] P0:Ljava/lang/Number; [1] ifnonnull +13 (target=14) P0:Ljava/lang/Number; [4] new #2 [4:Ljava/lang/Integer;=!] P0:Ljava/lang/Number; [7] dup [4:7:Ljava/lang/Integer;=!] [4:7:Ljava/lang/Integer;=!] P0:Ljava/lang/Number; [8] bipush 42 [4:7:Ljava/lang/Integer;=!] [4:7:Ljava/lang/Integer;=!] [8:i] P0:Ljava/lang/Number; [10] invokespecial #3 [4:7:Ljava/lang/Integer;=!] P0:Ljava/lang/Number; [13] astore_0 v0 13:Ljava/lang/Integer;=! [14] aload_0 v0 [14:Ljava/lang/Number;] P0,13:Ljava/lang/Number; [15] areturn P0,13:Ljava/lang/Number; <p>The types here are \"Ljava/lang/Number;\" and \"Ljava/lang/Integer;\". The types respect the type hierarchy, for example when the branches join and the type is \"Ljava/lang/Number;\". A mark \"=\" means that the type is the exact type, not an extension. A mark \"!\" means that the value is definitely not null.</p> <p>Useful applications: preverification of the type safety of bytecode.</p>"},{"location":"partialevaluator.html#note-on-type-variables-naming-convention","title":"Note on type variables naming convention","text":"<p>PGC has different representation for type string variables:</p> <ul> <li>External class name: <code>com.guardsquare.SomeClass</code></li> <li>Internal class name: <code>com/guardsquare/SomeClass</code></li> <li>Internal type (or just <code>type</code>): <code>Lcom/guardsquare/SomeClass;</code> (for arrays e.g. <code>[I</code>, <code>[Ljava/lang/Object;</code>)</li> <li>Internal class type: <code>com/guardsquare/SomeClass</code> (for arrays this is their internal type e.g. <code>[I</code>, <code>[Ljava/lang/Object;</code>)</li> </ul> <p>See <code>proguard.classfile.util.ClassUtil</code> for useful methods to convert between the different representations.</p>"},{"location":"partialevaluator.html#array","title":"Evaluation with primitive arrays","text":"<p>Primitive arrays may be of special interest, for example when performing optimizations.</p> <p>Consider the following code:</p> <pre><code>public static int getAnswer()\n{\nint[] array = new int[] { 6, 7 };\n\nreturn array[0] * array[1];\n}\n</code></pre> <p>Even though this is a trivial example, the previous evaluations wouldn't provide much useful information:</p> Instruction Stack v0 [0] iconst_2 [0:i] empty [1] newarray 10 [1:[I?=![i]] empty [3] dup [1:3:[I?=![i]] [1:3:[I?=![i]] empty [4] iconst_0 [1:3:[I?=![i]] [1:3:[I?=![i]] [4:i] empty [5] bipush 6 [1:3:[I?=![i]] [1:3:[I?=![i]] [4:i] [5:i] empty [7] iastore [1:3:[I?=![i]] empty [8] dup [1:8:[I?=![i]] [1:8:[I?=![i]] empty [9] iconst_1 [1:8:[I?=![i]] [1:8:[I?=![i]] [9:i] empty [10] bipush 7 [1:8:[I?=![i]] [1:8:[I?=![i]] [9:i] [10:i] empty [12] iastore [1:8:[I?=![i]] empty [13] astore_0 v0 13:[I?=![i] [14] aload_0 v0 [14:[I?=![i]] 13:[I?=![i] [15] iconst_0 [14:[I?=![i]] [15:i] 13:[I?=![i] [16] iaload [16:i] 13:[I?=![i] [17] aload_0 v0 [16:i] [17:[I?=![i]] 13:[I?=![i] [18] iconst_1 [16:i] [17:[I?=![i]] [18:i] 13:[I?=![i] [19] iaload [16:i] [19:i] 13:[I?=![i] [20] imul [20:i] 13:[I?=![i] [21] ireturn 13:[I?=![i] <p>The array type is \"[I\", which is the standard notation for an array of primitive integers.</p> <p>You can keep track of the lengths of arrays with ArrayReferenceValueFactory and even of the contents of primitive arrays with DetailedArrayValueFactory:</p> <pre><code>ValueFactory     valueFactory     = new DetailedArrayValueFactory();\nInvocationUnit   invocationUnit   = new BasicInvocationUnit(valueFactory);\nPartialEvaluator partialEvaluator = new PartialEvaluator(valueFactory,\ninvocationUnit,\nfalse);\n</code></pre> <p>The results of the evaluation then become:</p> Instruction Stack v0 [0] iconst_2 [0:2] empty [1] newarray 10 [1:[I?=![2]#0{6,7}] empty [3] dup [1:3:[I?=![2]#0{6,7}] [1:3:[I?=![2]#0{6,7}] empty [4] iconst_0 [1:3:[I?=![2]#0{6,7}] [1:3:[I?=![2]#0{6,7}] [4:0] empty [5] bipush 6 [1:3:[I?=![2]#0{6,7}] [1:3:[I?=![2]#0{6,7}] [4:0] [5:6] empty [7] iastore [1:3:[I?=![2]#0{6,7}] empty [8] dup [1:8:[I?=![2]#0{6,7}] [1:8:[I?=![2]#0{6,7}] empty [9] iconst_1 [1:8:[I?=![2]#0{6,7}] [1:8:[I?=![2]#0{6,7}] [9:1] empty [10] bipush 7 [1:8:[I?=![2]#0{6,7}] [1:8:[I?=![2]#0{6,7}] [9:1] [10:7] empty [12] iastore [1:8:[I?=![2]#0{6,7}] empty [13] astore_0 v0 13:[I?=![2]#0{6,7} [14] aload_0 v0 [14:[I?=![2]#0{6,7}] 13:[I?=![2]#0{6,7} [15] iconst_0 [14:[I?=![2]#0{6,7}] [15:0] 13:[I?=![2]#0{6,7} [16] iaload [16:6] 13:[I?=![2]#0{6,7} [17] aload_0 v0 [16:6] [17:[I?=![2]#0{6,7}] 13:[I?=![2]#0{6,7} [18] iconst_1 [16:6] [17:[I?=![2]#0{6,7}] [18:1] 13:[I?=![2]#0{6,7} [19] iaload [16:6] [19:7] 13:[I?=![2]#0{6,7} [20] imul [20:42] 13:[I?=![2]#0{6,7} [21] ireturn 13:[I?=![2]#0{6,7} <p>The array is now traced as having length 2 and elements 6 and 7.</p> <p>Useful application: simplification of code with enum types.</p>"},{"location":"partialevaluator.html#particularreference","title":"Evaluation with particular reference values","text":"<p>The values of references can also be of interest.</p> <p>Consider the following code:</p> <pre><code>public StringBuilder append()\n{\nStringBuilder s = new StringBuilder(\"asd\");\ns.append(\"fgh\");\nreturn s;\n}\n</code></pre> <p>If the value of <code>s</code> is of interest, this can be retrieved using a <code>ParticularValueFactory</code>. To also keep track of the references as they flow through method calls (in the example: the constructor-call, and the <code>append</code>), the InvocationUnit needs to be a <code>ExecutingInvocationUnit</code>:</p> <pre><code>ValueFactory            valueFactory     = new ParticularValueFactory(new BasicValueFactory(), new ParticularReferenceValueFactory());\nExecutingInvocationUnit invocationUnit   = new ExecutingInvocationUnit.Builder().build(valueFactory);\nPartialEvaluator        partialEvaluator = new PartialEvaluator(valueFactory, invocationUnit, false);\n</code></pre> <p>The results of the evaluation then become:</p> Instruction Stack (before the Instruction) v0 (before the Instruction) [0] new StringBuilder [empty:empty] [3] dup [0:StringBuilder=!#0] [empty:empty] [4] ldc \"asd\" [3:0:StringBuilder=!#0][3:0:StringBuilder=!#0] [empty:empty] [6] invokespecial StringBuilder.&lt;init&gt;(String)V [4:String?=#1(asd)][3:0:StringBuilder=!#0][3:0:StringBuilder=!#0] [empty:empty] [9] astore_0 v0 [3:0:StringBuilder=#2(asd)] [empty:empty] [10] aload_0 v0 [9:StringBuilder=#2(asd)] [11] ldc \"fgh\" [10:StringBuilder=#2(asd)] [9:StringBuilder=#2(asd)] [13] invokevirtual StringBuilder.append(String)StringBuilder [11:String?=#3(fgh)][10:StringBuilder=#2(asd)] [9:StringBuilder=#2(asd)] [16] pop [13:StringBuilder=#4(asdfgh)] [13:StringBuilder=#4(asdfgh)] [17] aload_0 v0 [13:StringBuilder=#4(asdfgh)] [18] areturn [17:StringBuilder=#4(asdfgh)] [13:StringBuilder=#4(asdfgh)] <p>(Class/String constants are added to the instruction, and <code>java/lang/</code> is ommited from the class names for clarity)</p> <p>The <code>StringBuilder</code> is now traced through the method, the value of the reference can be retrieved before and after each location. The value of the reference is printed in this output in the finishing brackets. The notation before the bracket is the notation of a <code>TypedReference</code> (TypedReference)</p>"},{"location":"partialevaluator.html#customization","title":"Customization","text":"<p>The <code>ExecutingInvocationUnit</code> is designed to be customizable and extensible in its capability to execute different methods. Therefore, it maintains a list of <code>Executor</code>s which define how a certain set of methods can be executed. Currently, only the <code>StringReflectionExecutor</code> is implemented which supports <code>String</code>, <code>StringBuilder</code>and <code>StringBuffer</code>. To customize an <code>ExecutingInvocationUnit</code>, use its dedicated <code>Builder</code>.</p> <pre><code>ExecutingInvocationUnit invocationUnit = new ExecutingInvocationUnit.Builder().useDefaultStringReflectionExecutor(false)\n.addExecutor(new MyExecutor())\n.build(valueFactory);\n</code></pre>"},{"location":"partialevaluator.html#limitations","title":"Limitations","text":"<ul> <li>Only <code>String</code>, <code>StringBuilder</code>, and <code>StringBuffer</code> are currently supported, although custom executors can be implemented.</li> <li>The <code>ParticularValueFactory</code> keeps track of one specific value of a reference. If more values would be possible (e.g., due to a branch), the result will be an <code>UnknownReferenceValue</code>/<code>IdentifiedReferenceValue</code></li> <li>Independent of the specific <code>Executor</code>, <code>ExecutingInvocationUnit</code> keeps track of changes to the instance of a method. However, it does not check for changes to reference values in the parameters.</li> </ul>"},{"location":"partialevaluator.html#lifecycle","title":"Lifecycle","text":"<pre><code>%% [Mermaid Diagramming and charting tool](https://mermaid.js.org/)\nstateDiagram-v2\n    L0: Try\n    state L0 {\n        L1: Evaluate instruction block and branches\n        [*] --&gt; startCodeAttribute\n        startCodeAttribute --&gt; L1\n        state L1 {\n            L2: Evaluate single instruction block\n            [*] --&gt; L2\n            state L2 {\n                L3: For each instruction in block\n                [*] --&gt; startInstructionBlock\n                startInstructionBlock --&gt; L3\n                state L3 {\n                    BR1: Instruction has been seen in this context?\n                    [*] --&gt; BR1\n                    BR1 --&gt; skipInstructionBlock : Yes\n                    skipInstructionBlock --&gt; [*]\n                    BR2: Already evaluated a lot of times?\n                    BR1 --&gt; BR2: No\n                    BR2 --&gt; generalizeInstructionBlock: Yes\n                    generalizeInstructionBlock --&gt; startInstructionEvaluation\n                    BR2 --&gt; startInstructionEvaluation: No\n                    startInstructionEvaluation --&gt; afterInstructionEvaluation\n                    BR3: Branch unit has been called?\n                    afterInstructionEvaluation --&gt; BR3\n                    BR3 --&gt; BR5 : Yes\n                    BR5: #Branch targets &gt; 1?\n                    BR5 --&gt; definitiveBranch: No\n                    BR5 --&gt; registerAlternativeBranch: Yes\n                    registerAlternativeBranch --&gt; registerAlternativeBranch\n                    registerAlternativeBranch --&gt; [*]\n                    definitiveBranch --&gt; BR6\n                    BR6: Instruction was JSR or JSR_W?\n                    BR3 --&gt; BR6 : No\n                    BR_RET: Instruction was RET?\n                    BR6 --&gt; BR_RET\n                    L5: Instruction was subroutine invocation\n                    BR6 --&gt; L5: Yes\n                    state L5 {\n                        [*] --&gt; startSubroutine\n                        recursion1: Evaluate all subroutines\n                        startSubroutine --&gt; recursion1\n                        note left of recursion1: Recursively call back to evaluateInstructionBlockAndExceptionHandlers\n                        recursion1 --&gt; generalizeSubroutine\n                        generalizeSubroutine --&gt; endSubroutine\n                        endSubroutine --&gt; [*]\n                    }\n                    L5 --&gt; [*]\n                    Repeat: Go to next instruction\n                    BR_RET --&gt; Repeat: No\n                    REG_RET: registerSubroutineReturn \n                    BR_RET --&gt; REG_RET: Yes\n                    REG_RET --&gt; [*]\n\n                }\n                L3 --&gt; instructionBlockDone\n                instructionBlockDone --&gt; [*]\n            }\n            L6: For each generated instructionBlock on generated stack\n            L2 --&gt; L6\n            state L6 {\n              evaluateSingleInstructionBlock --&gt; pop\n              pop --&gt; startBranchCodeBlockEvaluation\n              startBranchCodeBlockEvaluation --&gt; evaluateSingleInstructionBlock\n            }\n            L6 --&gt; [*]\n        }\n        L1 --&gt; startExceptionHandlingForBlock\n        L7: For each exception handler registered on code attribute\n      startExceptionHandlingForBlock --&gt; L7\n        state L7 {\n            BR7: Exception handler evaluation is needed?\n            [*] --&gt; BR7\n            BR7 --&gt; registerExceptionHandler: Yes\n            BR7 --&gt; registerUnusedExceptionHandler: No\n            nextExceptionHandler: Go to next exception handler\n            registerExceptionHandler --&gt; evaluateInstructionBlockAndBranches\n            evaluateInstructionBlockAndBranches --&gt; nextExceptionHandler\n            registerUnusedExceptionHandler --&gt; nextExceptionHandler\n        }\n        L7 --&gt; evaluationResults\n        evaluationResults --&gt; [*]\n    }\n    catch: Did catch?\n    L0 --&gt; catch\n    catch --&gt;  [*]: No\n    catch --&gt; registerException: Yes\n  registerException --&gt; [*]</code></pre> <p>The lifecycle can be tracked by providing a <code>PartialEvaluatorStateTracker</code> to the partial evaluator through its builder. For example, when you want to get a JSON debug output regarding the evaluations made by the partial evaluator, you can do so by:</p> <pre><code>JsonPrinter tracker = new JsonPrinter();\nPartialEvaluator partialEvaluator = PartialEvaluator.Builder.create().setStateTracker(tracker).build()\n</code></pre>"},{"location":"patternmatching.html","title":"Pattern matching","text":""},{"location":"patternmatching.html#basic-pattern-matching","title":"Basic pattern matching","text":"<p>The library has powerful support to match patterns in bytecode instruction sequences. You first define the pattern as a sequence of instructions, with wildcards. For example:</p> <pre><code>final int X = InstructionSequenceMatcher.X;\nfinal int C = InstructionSequenceMatcher.C;\n\nInstructionSequenceBuilder ____ =\nnew InstructionSequenceBuilder();\n\nInstruction[] pattern =\n____.iload(X)\n.bipush(C)\n.istore(X).__();\n\nConstant[] constants = ____.constants();\n</code></pre> <p>You can then find that pattern in given code:</p> <pre><code>programClassPool.classesAccept(\nnew AllMethodVisitor(\nnew AllAttributeVisitor(\nnew AllInstructionVisitor(\nnew MyMatchPrinter(\nnew InstructionSequenceMatcher(constants, pattern))))));\n</code></pre> <p>Complete example: ApplyPeepholeOptimizations.java</p>"},{"location":"patternmatching.html#replacing-patterns","title":"Replacing patterns","text":"<p>Instead of just matching instruction sequences, you can also replace matched sequences by other instruction sequences, for example to optimize code or instrument code. The core classes are PeepholeEditor and InstructionSequenceReplacer. Say that you want to replace an instruction sequence \"putstatic/getstatic\" by an equivalent \"dup/putstatic\":</p> <pre><code>final int X = InstructionSequenceReplacer.X;\n\nInstructionSequenceBuilder ____ =\nnew InstructionSequenceBuilder();\n\nInstruction[][] replacements =\n{\n____.putstatic(X)\n.getstatic(X).__(),\n\n____.dup()\n.putstatic(X).__()\n};\n\nConstant[] constants = ____.constants();\n\nBranchTargetFinder  branchTargetFinder  = new BranchTargetFinder();\nCodeAttributeEditor codeAttributeEditor = new CodeAttributeEditor();\n\nprogramClassPool.classesAccept(\nnew AllMethodVisitor(\nnew AllAttributeVisitor(\nnew PeepholeEditor(branchTargetFinder, codeAttributeEditor,\nnew InstructionSequenceReplacer(constants,\nreplacements[0],\nconstants,\nreplacements[1],\nbranchTargetFinder,\ncodeAttributeEditor)))));\n</code></pre> <p>You can define multiple patterns and their respective replacements in one go, with the wrapper InstructionSequencesReplacer.</p> <p>Complete example: ApplyPeepholeOptimizations.java</p>"},{"location":"reading.html","title":"Reading classes","text":""},{"location":"reading.html#streaming-classes-from-a-jar-file","title":"Streaming classes from a jar file","text":"<p>You can read classes from class files and various types of (nested) jar files or jmod files, with some convenient utility classes and visitors. For example, you can read all classes from all jar files in a given directory and print them out in a streaming fashion, while they are read, without collecting their representations:</p> <pre><code>DataEntrySource source =\nnew DirectorySource(\nnew File(inputDirectoryName));\n\nsource.pumpDataEntries(\nnew FilteredDataEntryReader(new DataEntryNameFilter(new ExtensionMatcher(\".jar\")),\nnew JarReader(\nnew ClassFilter(\nnew ClassReader(false, false, false, false, null,\nnew ClassPrinter())))));\n</code></pre> <p>Note the constructor-based dependency injection, to create a chain of visitor classes. We typically use a slightly unconventional indentation to make this construct easy to read.</p> <p>Complete example: PrintClasses.java</p>"},{"location":"reading.html#streaming-classes-from-a-dexapk-file","title":"Streaming classes from a dex/apk file","text":"<p>With the addition of <code>proguard-core-android</code>, you can read classes from dex/apk  files just like you would with jar files. A small example showing how to use  <code>DexClassReader()</code> to read classes from a dex/apk file:</p> <pre><code>DataEntrySource source = new DirectorySource(\nnew File(inputDirectoryName));\n\nDataEntryReader classReader =\nnew NameFilteredDataEntryReader(\"**.class\",\nnew ClassReader(false, false, false, false, null,\nnew ClassNameFilter(\"**\", null)));\n\n// Convert dex files to a jar first\nclassReader =\nnew NameFilteredDataEntryReader(\"classes*.dex\",\nnew DexClassReader(true,\nnew ClassPrinter()),\nclassReader);\n\nsource.pumpDataEntries(classReader);\n</code></pre> <p>Do note that in order to use dex/apk file reading functionalities within  your project, you must import <code>proguard-core-android</code> in the <code>build.gradle</code>  file:</p> <p>build.gradle <pre><code>dependencies {\n  ...\n  implementation project('com.guardsquare:proguard-core')\n  implementation project('com.guardsquare:proguard-core-android')\n  ...\n}\n</code></pre></p> <p>A complete example for reading from dex, apk and jar files can be found in: JarUtil.java</p>"},{"location":"reading.html#writing-out-streamed-classes","title":"Writing out streamed classes","text":"<p>You can read classes, optionally perform some small modifications, and write them out right away, again in a streaming fashion.</p> <pre><code>JarWriter jarWriter =\nnew JarWriter(\nnew ZipWriter(\nnew FixedFileWriter(\nnew File(outputJarFileName))));\n\nDataEntrySource source =\nnew FileSource(\nnew File(inputJarFileName));\n\nsource.pumpDataEntries(\nnew JarReader(\nnew ClassFilter(\nnew ClassReader(false, false, false, false, null,\nnew DataEntryClassWriter(jarWriter)))));\n\njarWriter.close();\n</code></pre> <p>Complete example: ApplyPeepholeOptimizations.java</p>"},{"location":"reading.html#collecting-classes","title":"Collecting classes","text":"<p>Alternatively, you may want to collect the classes in a so-called class pool first, so you can perform more extensive analyses on them:</p> <pre><code>ClassPool classPool = new ClassPool();\n\nDataEntrySource source =\nnew FileSource(\nnew File(jarFileName));\n\nsource.pumpDataEntries(\nnew JarReader(false,\nnew ClassFilter(\nnew ClassReader(false, false, false, false, null,\nnew ClassPoolFiller(classPool)))));\n</code></pre> <p>Complete example: Preverify.java</p>"},{"location":"reading.html#writing-out-a-set-of-classes","title":"Writing out a set of classes","text":"<p>If you've collected a set of classes in a class pool, you can write them out with the same visitors as before.</p> <pre><code>JarWriter jarWriter =\nnew JarWriter(\nnew ZipWriter(\nnew FixedFileWriter(\nnew File(outputJarFileName))));\n\nclassPool.classesAccept(\nnew DataEntryClassWriter(jarWriter));\n\njarWriter.close();\n</code></pre> <p>Complete example: Preverify.java</p>"},{"location":"releasenotes.html","title":"Release notes","text":""},{"location":"releasenotes.html#version-921","title":"Version 9.2.1","text":""},{"location":"releasenotes.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Fix <code>ClassUtil.externalClassVersion</code> returning null for preview versions</li> </ul>"},{"location":"releasenotes.html#version-920","title":"Version 9.2.0","text":""},{"location":"releasenotes.html#api-changes-for-line-number-handling","title":"API changes for line number handling","text":"<ul> <li>Add new StructuredLineNumberInfo class.</li> <li>Deprecate ExtendedLineNumberInfo class.</li> <li>Adapt utilities to generate StructuredLineNumberInfo instead of ExtendedLineNumberInfo.</li> </ul>"},{"location":"releasenotes.html#java-support","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 69.65535 (Java 25).</li> </ul>"},{"location":"releasenotes.html#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Prevent error when building with maven where the dependency \"kotlin-stdlib-common\" could not be found.</li> </ul>"},{"location":"releasenotes.html#version-9111","title":"Version 9.1.11","text":""},{"location":"releasenotes.html#kotlin-support","title":"Kotlin support","text":"<ul> <li>Add support for processing Kotlin 2.2 metadata.</li> </ul>"},{"location":"releasenotes.html#version-9110","title":"Version 9.1.10","text":""},{"location":"releasenotes.html#java-support_1","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 68.65535 (Java 24).</li> </ul>"},{"location":"releasenotes.html#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Prevent <code>StackOverflowError</code> in ConstantPoolShrinker when visiting a pattern matching switch in java &gt;= 21. </li> </ul>"},{"location":"releasenotes.html#version-919","title":"Version 9.1.9","text":""},{"location":"releasenotes.html#improved","title":"Improved","text":"<ul> <li>Improve performance of <code>MethodLinker</code> in situations with large number of linked methods in a chain.</li> </ul>"},{"location":"releasenotes.html#version-918","title":"Version 9.1.8","text":""},{"location":"releasenotes.html#improved_1","title":"Improved","text":"<ul> <li>Improve runtime of <code>BamTransferRelation</code>.</li> <li>Add a method signature and descriptor parser in the new package <code>proguard.classfile.attribute.signature</code>.</li> </ul>"},{"location":"releasenotes.html#kotlin-support_1","title":"Kotlin support","text":"<ul> <li>Add support for processing Kotlin 2.1 metadata.</li> </ul>"},{"location":"releasenotes.html#api-changes-for-the-dataflow-analysis-code","title":"API changes for the dataflow analysis code","text":"<p>This is a continuation of the API changes started in release 9.1.7. - Remove <code>JvmValueBamCpaRun</code> in order to simplify the utility code to run the analysis. <code>ValueAnalyzer</code> is the direct replacement, this class has the same behavior as <code>JvmValueBamCpaRun</code>, as long as <code>analyze</code> is called only once. - Remove <code>JvmTaintMemoryLocationBamCpaRun</code> in order to simplify the utility code to run the analysis. <code>TaintAnalyzer</code> is the direct replacement, this class has the same behavior as <code>JvmTaintMemoryLocationBamCpaRun</code>, as long as <code>analyze</code> is called only once. - Remove the <code>CpaRun</code> infrastructure. - Remove <code>MapAbstractStateFactory</code>, <code>WrapperTransferRelation</code>, and other classes that were only used with the tree heap model. - Remove <code>StateNames</code> and <code>getStateByName</code>. - Refactor several classes taking generic parameters for <code>CfaEdge</code>, <code>CfaNode</code>, and <code>Signature</code>, to not use the generic parameters anymore. They now default to <code>JvmCfaEdge</code>, <code>JvmCfaNode</code>, and <code>MethodSignature</code>. - Refactor CPA reached set, waitlist, operators, and all their dependant classes to be parametrized by the type of abstract states of the dataflow analysis. This allows to make the code safe at compile time and avoid unnecessary casts. - Move <code>AbortOperator</code> from being a parameter of <code>CpaAlgorithm#run</code> to the <code>ConfigurableProgramAnalysis</code> interface. - Move functionalities of <code>LatticeAbstractState</code> to <code>AbstractState</code>. Remove <code>AbstractDomain</code> since the abstract states can now perform directly the <code>isLessOrEqual</code> and <code>join</code> operations without the need of delegation.</p>"},{"location":"releasenotes.html#bugfixes_3","title":"Bugfixes","text":"<ul> <li>Fix semi-lattice properties of <code>MultiTypedReferenceValue</code>'s <code>generalize()</code> method</li> <li>Fix integers potentially being used as reference identifier during interprocedural value analysis. This could result in the analysis not reaching a fixed point.</li> <li>Fix <code>JvmTaintTransferRelation#propagateExtraTaints</code> propagating taint incorrectly if the stack contains more than one element.</li> </ul>"},{"location":"releasenotes.html#version-917","title":"Version 9.1.7","text":""},{"location":"releasenotes.html#bugfixes_4","title":"Bugfixes","text":"<ul> <li>Make sure injected initialization methods in interfaces have the correct access flags.</li> </ul>"},{"location":"releasenotes.html#improved_2","title":"Improved","text":"<ul> <li><code>InstructionSequenceMatcher</code> now supports matching of primitive array constants.</li> <li>Support propagation of extra specified taints in <code>JvmTaintTransferRelation</code>.</li> <li>Introduce <code>ReflectiveModel</code> and <code>ReflectiveModelExecutor</code> to simplify the creation and analysis of <code>Model</code>s.</li> </ul>"},{"location":"releasenotes.html#api-improvements","title":"API improvements","text":"<ul> <li>Rename <code>CallVisitor</code> to <code>CallHandler</code> and add extra parameters to handle calls accounting for more data.</li> <li>Add <code>ClassUtil.isClassInitializer(String)</code> and <code>ClassUtil.isInstanceInitializer(String)</code>.</li> <li>Extend <code>MemberCollectionFilter</code> to accept a <code>Set</code> of any subtype of <code>Member</code>.</li> </ul>"},{"location":"releasenotes.html#api-changes","title":"API changes","text":"<ul> <li>Move classes related to <code>Model</code> to the <code>proguard.evaluation.value.object.model</code> package.</li> <li><code>StringSharer</code> now uses a string pool to share strings, instead of traversing references.</li> </ul>"},{"location":"releasenotes.html#api-changes-for-the-dataflow-analysis-code_1","title":"API changes for the dataflow analysis code","text":"<p>There are several changes to the dataflow analysis code with the objective of eliminating unnecessary abstraction and  make its usage easier. This includes: - Remove <code>MemoryLocation</code>, use <code>JvmMemoryLocation</code> instead. - Make <code>JvmMemoryLocation</code> independent of the type of value contained in the analysis' state. The type of the value now needs only to be provided when calling <code>extractValueOrDefault</code>. - Remove all code related to the tree heap model for taint analysis.</p>"},{"location":"releasenotes.html#version-916","title":"Version 9.1.6","text":""},{"location":"releasenotes.html#java-support_2","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 67.65535 (Java 23).</li> </ul>"},{"location":"releasenotes.html#api-changes_1","title":"API changes","text":"<ul> <li>Make <code>CallGraph</code> reconstruction/traversal methods generic in that they now take a <code>Set&lt;MethodSignature&gt;</code> to determine when to stop exploration</li> <li>Delete <code>EntryPoint</code> class</li> </ul>"},{"location":"releasenotes.html#bugfixes_5","title":"Bugfixes","text":"<ul> <li>Fix incorrect traversal direction in <code>predecessorsContain</code>.</li> </ul>"},{"location":"releasenotes.html#version-915","title":"Version 9.1.5","text":""},{"location":"releasenotes.html#improved_3","title":"Improved","text":"<ul> <li><code>ExecutingInvocationUnit</code> now supports execution of static methods with no parameters.</li> </ul>"},{"location":"releasenotes.html#bugfixes_6","title":"Bugfixes","text":"<ul> <li>Prevent <code>unknown enum value for KmVersionRequirementVersionKind</code> exception when processing code compiled with an outdated Kotlin version.</li> <li>Fix <code>UnknownReferenceValue</code> return wrong string format in <code>getType</code>.</li> <li>Fix <code>ReflectionExecutor</code> not updating instance of <code>StringBuilder</code>s in fallback result.</li> <li>Fix <code>DetailedArrayValueFactory#createArrayReferenceValue</code> expecting an array type instead of the type of the values contained in the array.</li> <li>Fix <code>ExecutingInvocationUnit</code> using both <code>ParticularReferenceValue</code> and <code>DetailedArrayReferenceValue</code> for arrays of reference types. Now <code>DetailedArrayValueFactory</code> is used consistently.</li> </ul>"},{"location":"releasenotes.html#api-changes_2","title":"API changes","text":"<ul> <li><code>Executor</code>s do not support <code>MethodSignature</code> wildcards anymore. The assumption from <code>ExecutorLookup</code> is now that all the signatures supported by the executor are declared explicitly in <code>getSupportedMethodSignatures</code>.</li> <li><code>StringExecutor</code>, <code>ExecutingInvocationUnit</code>, and <code>JvmValueBamCpaRun</code> now need the library class pool as parameter.</li> <li>Calls to <code>InstructionSequenceBuilder.ldc</code> now optionally accept a <code>ConstantVisitor</code>. The visitor will visit the constant that is referenced by the added instruction.</li> <li><code>DetailedArrayValueFactory</code> now takes a <code>referenceValueFactory</code> parameter, which determines if the value factory supports direct creation of reference arrays.</li> <li><code>ParticularReferenceValue</code> can't be used with arrays anymore.</li> </ul>"},{"location":"releasenotes.html#version-914","title":"Version 9.1.4","text":""},{"location":"releasenotes.html#kotlin-support_2","title":"Kotlin support","text":"<ul> <li>Update Kotlin dependency to 2.0.0 final release version.</li> </ul>"},{"location":"releasenotes.html#improved_4","title":"Improved","text":"<ul> <li>Add support for dynamic dispatch in <code>ExecutorInvocationUnit</code>. This makes it possible to execute methods based on statically observed types of objects, not only based on the type of the used variables.</li> </ul>"},{"location":"releasenotes.html#api-changes_3","title":"API changes","text":"<ul> <li>Remove <code>ExecutorMatcher</code> and change the <code>Executor</code> interface so that it declares supported methods by <code>MethodSignature</code> wildcards instead.</li> <li>Add <code>@Nullable</code> annotations to <code>MethodSignature</code>.</li> </ul>"},{"location":"releasenotes.html#bugfixes_7","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>NullPointerException</code> when Kotlin property metadata <code>isVar</code> flag does not correctly indicate the presence of a setter.</li> </ul>"},{"location":"releasenotes.html#version-913","title":"Version 9.1.3","text":""},{"location":"releasenotes.html#kotlin-support_3","title":"Kotlin support","text":"<ul> <li>Add support for processing Kotlin 2.0 metadata.</li> <li>Update to stable version of the Kotlin metadata library.</li> </ul>"},{"location":"releasenotes.html#version-912","title":"Version 9.1.2","text":""},{"location":"releasenotes.html#java-support_3","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 66.65535 (Java 22).</li> </ul>"},{"location":"releasenotes.html#api-changes_4","title":"API changes","text":"<ul> <li>Remove deprecated <code>ReferenceValueFactory</code>, <code>ParticularReferenceValueFactory</code> should be used instead.</li> <li>Deprecate methods in <code>ValueFactory</code> taking an <code>Object</code> as parameter. The alternatives using <code>ParticularObject</code> should be used instead.</li> <li><code>Executor#getMethodResult</code> now returns a <code>MethodResult</code> object instead of just the return value of the analyzed method. The calling instance has been removed from the parameters array since it's already available in another argument.</li> </ul>"},{"location":"releasenotes.html#improved_5","title":"Improved","text":"<ul> <li>Add support for selective parameter reconstruction to define which methods should have their calls evaluated.</li> <li>Refactor <code>ExecutingInvocationUnit</code> to be customizable using executors. Improve checking whether method instance should be replaced in stack and variables.</li> <li>Support execution of methods that operate on 1D arrays of all primitive and reference types with <code>ReflectionExecutor</code>.</li> <li>Use runtime type instead of static type when possible in <code>ExecutingInvocationUnit</code>.</li> <li>Introduce <code>ParticularObject</code> as the value tracked by <code>ParticularReferenceValue</code>. This makes explicit which kind of values can be tracked during the analysis, and introduces the possibility of tracking a model of the values that differ from the actual tracked object.</li> <li>Extend capabilities of <code>ExecutingInvocationUnit</code> to allow executors to specify side effects not only on the instance value, but also on parameters.</li> <li>Extend capabilities of <code>ExecutingInvocationUnit</code> to allow executors to specify return/instance/argument values that are not particular.</li> </ul>"},{"location":"releasenotes.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>Improve Kotlin MultiFileFacade metadata assertions to detect uninitialized references. </li> <li>Fix handling of category 2 values in <code>JvmValueTransferRelation</code> to work correctly with <code>ExecutingInvocationUnit</code>.</li> <li>Fix concurrency problems in CallGraph and ValueFactory ids.</li> <li>Fix a bug in <code>ReturnClassExtractor</code> returning the last parameter type instead of null for primitive return values.</li> <li>Fix <code>ExecutorMethodSignatureMatcher</code> trying to mutate an immutable map.</li> <li>Fix <code>TypedReferenceValue.cast()</code> not handling null values correctly.</li> </ul>"},{"location":"releasenotes.html#version-911","title":"Version 9.1.1","text":""},{"location":"releasenotes.html#bugfixes_8","title":"Bugfixes","text":"<ul> <li>Enable fix previously behind system property: fix <code>TypedReferenceValue.generalize()</code> not setting <code>mayBeExtension</code> to true when generalizing to common parent type.</li> <li>Avoid printing <code>PartialEvaluator</code> messages when an <code>ExcessiveComplexityException</code> occurs.</li> <li>Fix incorrect writing of flags for type parameters with name annotations.</li> <li>Fix incorrect writing of flags for reified type parameters.</li> <li>Fix model for types and type parameters, removing the incorrect <code>HAS_ANNOTATION</code> common flag.</li> </ul>"},{"location":"releasenotes.html#improved_6","title":"Improved","text":"<ul> <li>Enable new <code>PartialEvaluator</code> error message format by default.</li> <li>Add the ability to implement a custom renaming strategy for <code>ClassReferenceFixer</code>.</li> <li>Add new <code>MaxStackSizeComputer</code> to compute the maximum stack size of a code attribute which is more memory efficient than the existing <code>StackSizeComputer</code>.</li> <li>Add <code>IdentifiedArrayReferenceValue.generalize()</code> to maintain <code>ID</code> when applied to two instances with same <code>ID</code>.</li> <li>Improve <code>ExecutingInvocationUnit</code> support to methods that transform a <code>String</code> into an array of a primitive type. </li> <li>Add support for customizing the way method calls are processed in taint analysis.</li> </ul>"},{"location":"releasenotes.html#new-code-style","title":"New Code Style","text":"<p>We have changed our code style to follow the Google Java Style Guide. A new auto-formatter is now available to make contributing to  ProGuardCORE easier:</p> <pre><code>./gradlew spotlessApply\n</code></pre> <p>More information can be found in the <code>Code Style</code> section in <code>CONTRIBUTING.md</code>. </p>"},{"location":"releasenotes.html#version-91","title":"Version 9.1","text":""},{"location":"releasenotes.html#improved_7","title":"Improved","text":"<ul> <li>Added <code>PartialEvaluator</code> JSON output.</li> <li>Improve <code>PartialEvaluator</code> error messages when enabled with <code>PartialEvaluator.Builder.setPrettyPrinting()</code>.</li> <li>Improve documentation for the <code>PartialEvaluator</code> https://guardsquare.github.io/proguard-core/partialevaluator.html.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_1","title":"Bug fixes","text":"<ul> <li>Fix <code>UnsupportedOperationException</code> when trying to shrink Kotlin metadata from a lambda function.</li> <li>Change behavior of array index out of bounds during partial evaluation, which is now handled as an unknown value instead of throwing an exception in the partial evaluator method.</li> <li>Fix <code>IllegalArgumentException</code> when joining values with different computational type during value analysis.</li> <li>Fix <code>TypedReferenceValue.generalize()</code> not setting <code>mayBeExtension</code> to true when generalizing to common parent type. For now only available experimentally by setting the system property <code>proguard.pe.newextensiongeneralize</code>.</li> <li>Fix <code>MultiTypeReferenceValue</code> possibly using an imprecise type metadata (i.e., mayBeExtension, mayBeNull) in the generalized type.</li> </ul>"},{"location":"releasenotes.html#api-changes_5","title":"API Changes","text":"<ul> <li>No longer consider Record attributes empty when they have no components in <code>NonEmptyAttributeFilter</code>. (#118)</li> <li>Add new <code>ProguardCoreException</code> subclasses with more specific meanings.</li> </ul>"},{"location":"releasenotes.html#version-9010","title":"Version 9.0.10","text":""},{"location":"releasenotes.html#improved_8","title":"Improved","text":"<ul> <li><code>TaintSink</code> can now be configured with a predicate to filter on which <code>TaintSource</code>s trigger it.</li> <li>Improve performance of <code>DynamicClassReferenceInitializer</code>.</li> <li>Improve performance of <code>DynamicClassMemberReferenceInitializer</code>.</li> </ul>"},{"location":"releasenotes.html#api-changes_6","title":"API changes","text":"<ul> <li>The constructors in <code>JvmInvokeTaintSink</code> are now deprecated, <code>JvmInvokeTaintSink#Builder</code> should be used instead.</li> <li><code>MultiTypedReferenceValue.generalize()</code> now removes the <code>null</code> type from the set of potential types, and sets <code>maybeNull</code> on the other types instead.</li> </ul>"},{"location":"releasenotes.html#version-909","title":"Version 9.0.9","text":""},{"location":"releasenotes.html#kotlin-support_4","title":"Kotlin support","text":"<ul> <li>Add support for processing Kotlin 1.9 metadata.</li> <li>Update <code>kotlinx</code> metadata dependency to version 0.6.0.</li> </ul>"},{"location":"releasenotes.html#java-support_4","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 65.65535 (Java 21).</li> </ul>"},{"location":"releasenotes.html#improved_9","title":"Improved","text":"<ul> <li>Added support for adding line numbers in the <code>CodeAttributeEditor</code>.</li> <li>Improve performance of <code>ClassReferenceInitializer</code> when initializing Kotlin type aliases.</li> <li>Improve performance of <code>ClassPool.removeClass</code>.</li> <li>Allow more configuration of <code>ExecutingInvocationUnit</code> by using <code>ExecutingInvocationUnit.Builder</code>.</li> <li>Add a mode to <code>ExecutingInvocationUnit</code> to approximate reference of types not supported for the execution via reflection.</li> <li>Implement <code>Autocloseable</code> in <code>DataEntryWriter</code> interface.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_2","title":"Bug fixes","text":"<ul> <li>Use program location as hash code for <code>JvmAbstractState</code> to allow correct use with hash sets.</li> <li>Fix a bug in <code>JvmTransferRelation</code> handling arithmetic instructions returning category 2 values incorrectly.</li> <li>Fix delegation of <code>proguard.evaluation.value.ParticularValueFactory#createReferenceValueNull()</code>.</li> </ul>"},{"location":"releasenotes.html#api-changes_7","title":"API changes","text":"<ul> <li>The key used for fields in <code>JvmAbstractState</code> has been updated to include the field type to disambiguate between    overloaded fields.</li> <li>Replace <code>allNodes</code> field in <code>proguard.analysis.cpa.defaults.Cfa</code> with <code>getAllNodes</code> method to save memory.</li> <li>Constructor for <code>ExecutingInvocationUnit</code> is deprecated, use <code>ExecutingInvocationUnit.Builder</code> instead.</li> </ul>"},{"location":"releasenotes.html#version-908","title":"Version 9.0.8","text":""},{"location":"releasenotes.html#improved_10","title":"Improved","text":"<ul> <li>Increase <code>proguard.classfile.VersionConstants.MAX_SUPPORTED_VERSION</code> to <code>64.65535</code> (Java 20 + preview enabled).</li> <li>Fix tracking of <code>IdentifiedReferenceValue</code> IDs.</li> <li>Add new Kotlin visitor SAM interfaces: <code>KotlinClassVisitor</code>, <code>KotlinFileFacadeVisitor</code>,   <code>KotlinMultiFileFacadeVisitor</code>, <code>KotlinMultiFilePartVisitor</code>, <code>KotlinSyntheticClassVisitor</code>.</li> </ul>"},{"location":"releasenotes.html#api-changes_8","title":"API changes","text":"<ul> <li><code>JvmTransferRelation</code> has been refactored to model <code>IINC</code> in a separate <code>computeIncrement</code> method. </li> <li>The <code>ProcessingFlag.DONT_PROCESS_KOTLIN_MODULE</code> value was changed from <code>0x00002000</code> to <code>0x00008000</code>.</li> <li>Remove <code>fromClassPool</code> suffixes in <code>CfaUtil</code> methods.</li> <li>Refactor <code>CodeLocation</code> to only take the signature and offset into consideration.</li> <li><code>IdentifiedReferenceValue</code> <code>id</code> field changed from <code>int</code> to <code>Object</code>.</li> <li><code>ParticularValueFactory.ReferenceFactory</code> replaced by <code>ParticularReferenceValueFactory</code>.</li> <li>Add <code>ValueFactory.createReferenceValue(String type, Clazz referencedClass, boolean mayBeExtension, boolean maybeNull, Clazz   creationClass, Method  creationMethod, int creationOffset)</code> to allow creating references identified by their creation site.</li> <li>Add <code>JvmCfaReferenceValueFactory</code> to create references identified by the <code>JvmCfaNode</code> creation site.</li> </ul>"},{"location":"releasenotes.html#upgrade-considerations","title":"Upgrade considerations","text":"<p>Identified and particular references can now be identified by any <code>Object</code> instead of a simple <code>int</code>.  However, this means that code which compared the IDs may need to be modified. For example, the following code should be changed:</p> <pre><code>    public static boolean equal(IdentifiedReferenceValue a, IdentifiedReferenceValue b) {\nreturn a.id == b.id;\n}\n</code></pre> <p>It should use the <code>equals</code> method instead.</p> <pre><code>    public static boolean equal(IdentifiedReferenceValue a, IdentifiedReferenceValue b) {\nreturn a.id.equals(b.id);\n}\n</code></pre> <p>The <code>ParticularReferenceValueFactory</code> identifies references with integers by default:</p> <pre><code>ValueFactory valueFactory = new ParticularReferenceFactory(new ParticularReferenceValueFactory());\nValue a = valueFactory.createReferenceValue(\"Ljava/lang/String;\", clazz, false, false);\n// a.id will be an integer.\n</code></pre> <p>Any <code>Object</code> can be used as an ID using the <code>createReferenceValueForId</code> method:</p> <pre><code>String objectId = \"myId\";\nValueFactory valueFactory = new ParticularReferenceFactory(new ParticularReferenceValueFactory());\nValue a = valueFactory.createReferenceValueForId(\"Ljava/lang/String;\", clazz, false, false, objectId);\n// a.id will be objectId\n</code></pre>"},{"location":"releasenotes.html#version-907","title":"Version 9.0.7","text":""},{"location":"releasenotes.html#improved_11","title":"Improved","text":"<ul> <li>Add <code>JvmShallowHeapModel</code> for selective heap modeling.</li> </ul>"},{"location":"releasenotes.html#version-907_1","title":"Version 9.0.7","text":""},{"location":"releasenotes.html#improved_12","title":"Improved","text":"<ul> <li>Don't report warnings for missing Kotlin default implementation classes when initializing with <code>ClassReferenceInitializer</code>.</li> <li>Only link matching methods in Kotlin file facades with <code>MethodLinker</code>.</li> <li>Extend the <code>LimitedHashMap</code> parameterization with an element exclusion selector.</li> <li>Add the possibility to add a predicate to taint sources and sinks for selective response to calls.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_3","title":"Bug fixes","text":"<ul> <li>Fix the reduce operator producing a wrong <code>JvmAbstractState</code> for the composite taint analysis.</li> <li>Fix potential <code>expected Precise Reference</code> runtime verifier error.</li> <li>Don't report warnings for missing Kotlin default implementation classes when initiazing with <code>ClassReferenceInitializer</code>.</li> </ul>"},{"location":"releasenotes.html#api-improvements_1","title":"API Improvements","text":"<ul> <li>Add <code>KotlinMetadataAsserter</code> to check the integrity of Kotlin metadata.</li> <li>Add <code>JvmReturnTaintSink</code> to support return instruction sinks in taint analysis.</li> <li>Use method signatures instead of fully qualified names in taint sources and sinks.</li> </ul>"},{"location":"releasenotes.html#api-changes_9","title":"API changes","text":"<ul> <li><code>JvmTaintSink</code> has been generalized, use <code>JvmInvokeTaintSink</code> to have the old functionalities.</li> </ul>"},{"location":"releasenotes.html#version-906","title":"Version 9.0.6","text":""},{"location":"releasenotes.html#improved_13","title":"Improved","text":"<ul> <li>Add support for limiting the size of the CPA tree heap model with <code>LimitedHashMap</code>s.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_4","title":"Bug fixes","text":"<ul> <li>Fix <code>ldc_w</code> method in the <code>InstructionSequenceBuilder</code> generating a <code>ldc</code> instruction instead of a <code>ldc_w</code>.</li> </ul>"},{"location":"releasenotes.html#api-improvements_2","title":"API Improvements","text":"<ul> <li>Add <code>referencedDefaultMethodAccept</code> to <code>KotlinFunctionMetadata</code> model.</li> </ul>"},{"location":"releasenotes.html#version-905","title":"Version 9.0.5","text":""},{"location":"releasenotes.html#improved_14","title":"Improved","text":"<ul> <li>Replace <code>proguard-assembler</code> dependency in test fixtures with Maven Central version.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_5","title":"Bug fixes","text":"<ul> <li>Do not add interprocedural CFA edges for methods missing intraprocedural CFA.</li> </ul>"},{"location":"releasenotes.html#version-904","title":"Version 9.0.4","text":""},{"location":"releasenotes.html#improved_15","title":"Improved","text":"<ul> <li>Allow class sub-hierarchy re-initialization for the optimized implementation of <code>ClassSubHierarchyInitializer</code>.</li> <li>Enable providing distinct abort operators for the main and trace reconstruction CPAs.</li> <li>Add a heap model for taint CPA supporting tainting of whole objects.</li> <li><code>Call</code> API: Add a few utilities and fix inconsistent call argument count getter behavior.</li> <li>Only change the Kotlin metadata version if the original version is unsupported.</li> <li>Add support for Kotlin context receivers in Kotlin metadata.</li> <li>Add support for reading &amp; writing Kotlin 1.8 metadata.</li> </ul>"},{"location":"releasenotes.html#api-improvements_3","title":"API Improvements","text":"<ul> <li>Add <code>referencedDefaultImplementationMethodAccept</code> to <code>KotlinFunctionMetadata</code> model class.</li> <li>Deprecated <code>referencedMethodAccept(Clazz, MemberVisitor)</code> in favour of <code>referencedMethodAccept(MemberVisitor)</code> in <code>KotlinFunctionMetadata</code> model class.</li> <li>Add <code>TransformedStringMatcher</code>.</li> <li>Add <code>ClassFeatureNameCollector</code>.</li> <li>Add var-arg constructor to <code>ClassPath</code>.</li> <li>Add <code>DataEntryClassInfoFilter</code>.</li> <li>Add <code>NamedDataEntry</code>.</li> <li>Refactor <code>CodeLocation#getClassName</code> as <code>getExternalClassName</code> to comply with the types naming convention.</li> <li>Make <code>TypedReferenceValue.ALLOW_INCOMPLETE_CLASS_HIERARCHY</code> private, add a getter <code>TypedReferenceValue.allowsIncompleteClassHierarchy()</code> instead.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_6","title":"Bug fixes","text":"<ul> <li>Fix side effect on <code>DetailedArrayReferenceValue</code> modifying values at previous offsets on array store   instructions during <code>PartialEvaluator</code> execution.</li> <li>Fix <code>JvmTransferRelation</code> to produce a successor in case of missing interprocedural call edge   (e.g., in case of incomplete call resolution).</li> <li>Fix call resolution for <code>invokedynamic</code> (issue #63). There might now be calls with incomplete target   information. By default, these calls will not be distributed to visitors, but this can be enabled   by setting the <code>skipIncompleteCalls</code> option in the call resolver.</li> <li>Fix leading <code>$</code> being stripped from inner classes by the <code>ClassReferenceFixer</code>. This prevents classes   with names like <code>Foo$$Bar</code> incorrectly having their simple name changed from <code>$Bar</code> to <code>Bar</code>.</li> </ul>"},{"location":"releasenotes.html#version-903","title":"Version 9.0.3","text":""},{"location":"releasenotes.html#java-support_5","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 63.65535 (Java 19 ea). (<code>PGD-247</code>)</li> </ul>"},{"location":"releasenotes.html#improved_16","title":"Improved","text":"<ul> <li>Add utility to produce dot-graphs for control flow automatons (<code>CfaUtil.toDot(cfa)</code>, example <code>VisualizeCfa</code>).</li> <li>Add support for heap slicing on call sites and heap reconstruction on return sites in dataflow analysis heap tree model.</li> <li>Add support for differential map representation to be used in the data flow analysis.</li> </ul>"},{"location":"releasenotes.html#api-improvements_4","title":"API Improvements","text":"<ul> <li>Split <code>ProgramLocationDependentTransferRelation</code> into forward and backward variants.</li> <li>Add <code>ClassPoolClassLoader</code> utility for loading ProGuardCORE classes.</li> <li>Add builders for CPA runs.</li> </ul>"},{"location":"releasenotes.html#version-902","title":"Version 9.0.2","text":""},{"location":"releasenotes.html#improved_17","title":"Improved","text":"<ul> <li><code>JvmMemoryLocationTransferRelation</code> does not rely anymore on a pre-computed abstract reachability graph.</li> </ul>"},{"location":"releasenotes.html#improvements-to-kotlin-metadata-initialization","title":"Improvements to Kotlin metadata initialization","text":"<p>Several improvements to Kotlin metadata initialization now allow building the Kotlin metadata model for library classes (<code>LibraryClass</code>):</p> <ul> <li><code>KotlinMetadataInitializer</code> provides a new public method <code>initialize(Clazz, int, int[], String[], String[], int, String, String)</code> to initialize   the Kotlin metadata model for a given class.</li> <li><code>ClassReader</code> can now build the Kotlin metadata model by setting <code>includeKotlinMetadata</code> to <code>true</code>.</li> <li><code>LibraryClassReader</code> can now read the Kotlin metadata annotation and provide the components to a consumer.</li> <li>An <code>UnsupportedKotlinMetadata</code> type is now assigned by the <code>KotlinMetadataInitializer</code> if the Kotlin metadata model   could not be initialized correctly. </li> </ul>"},{"location":"releasenotes.html#version-901","title":"Version 9.0.1","text":""},{"location":"releasenotes.html#improved_18","title":"Improved","text":"<ul> <li><code>ExecutingInvocationUnit</code> now loads values from static final fields.</li> <li>Initialize Kotlin lambda method references when the JVM method name is <code>&lt;anonymous&gt;</code>.</li> <li>Add the possibility of limiting the number of <code>CodeAttributes</code> contributing into CFA.</li> <li>Add the possibility of limiting the number of <code>CodeAttributes</code> considered by the <code>CallResolver</code>.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_7","title":"Bug fixes","text":"<ul> <li>Fix wrong handling of array types in <code>ExecutingIvocationUnit</code> and <code>ParticularReferenceValue</code>.</li> <li><code>ParticularReferenceValue</code> sanity checks now take inheritance into consideration, improving call analysis.</li> <li>Prevent missing semicolon leading to an infinite loop in <code>ClassUtil#internalMethodParameterCount</code>.</li> <li>Make category 2 CPA taint sources affect only the most significant byte abstract state.</li> <li>Fix inconsistent usage of type names in the context of the <code>PartialEvaluator</code> that could result in   trying to create an internal type string from a string that was already an internal type.</li> <li>Fix initialization of Kotlin callable references when using <code>-Xno-optimized-callable-references</code> compiler option.</li> <li>Fix <code>createCache()</code> delegation in <code>ArgBamCpaRun</code></li> </ul>"},{"location":"releasenotes.html#upgrade-considerations_1","title":"Upgrade considerations","text":""},{"location":"releasenotes.html#type-name-convention","title":"TYPE NAME CONVENTION","text":"<p>PGC has different representation for type string variables: </p> <ul> <li>External class name: <code>com.guardsquare.SomeClass</code></li> <li>Internal class name: <code>com/guardsquare/SomeClass</code></li> <li>Internal type (or just <code>type</code>): <code>Lcom/guardsquare/SomeClass;</code> (for arrays e.g. <code>[I</code>, <code>[Ljava/lang/Object;</code>)</li> <li>Internal class type: <code>com/guardsquare/SomeClass</code> (for arrays this is their internal type e.g. <code>[I</code>, <code>[Ljava/lang/Object;</code>)</li> </ul> <p>See <code>proguard.classfile.util.ClassUtil</code> for useful methods to convert between the different representations.</p> <p>Since internal class name and type were used ambiguously, from version 9.0.1 the internal type is used  consistently whenever we have a variable named <code>type</code>.</p> <p>Since this was not the case, this update might cause some <code>type</code> variables switching from the internal class name notation to the internal type notation, potentially breaking some logic if types are used by an external application using proguard-core.</p>"},{"location":"releasenotes.html#version-90-april-2022","title":"Version 9.0 (April 2022)","text":""},{"location":"releasenotes.html#configurable-program-analysis-cpa","title":"Configurable program analysis (CPA)","text":"<p>CPA is a formalism for data flow analysis allowing seamless composition of various analyses and model checking techniques. Thus, it adds a framework for systematic development and extension of static analyses in a uniform structured way.</p> <p>Taint analysis is the first ProGuardCORE CPA. Its goal is to detect data flow between source and sink method calls, which is useful for detecting bugs and security flaws.</p> <p>The Taint Analysis manual page provides more information.</p> <ul> <li>Add configurable program analysis (CPA) for interprocedural data flow analysis development.</li> <li>Add taint analysis.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_8","title":"Bug fixes","text":"<ul> <li>Prevent linking a final method with a shadowing method in a subclass.</li> <li>Force <code>Call#getArgumentCount()</code> to be correct even if the actual argument values   could not be calculated or have been cleared.</li> <li>Reset <code>ExecutingInvocationUnit</code> parameters array even when an exception happens.</li> </ul>"},{"location":"releasenotes.html#version-807","title":"Version 8.0.7","text":""},{"location":"releasenotes.html#java-support_6","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 62.65535 (Java 18 ea).</li> </ul>"},{"location":"releasenotes.html#improved_19","title":"Improved","text":"<ul> <li>Add support for Kotlin property synthetic delegate methods.</li> <li>Add ability to pass <code>KotlinMetadataVersion</code> to <code>KotlinMetadataWriter</code> / <code>KotlinModuleWriter</code>.</li> </ul>"},{"location":"releasenotes.html#version-806","title":"Version 8.0.6","text":""},{"location":"releasenotes.html#improved_20","title":"Improved","text":"<ul> <li>Add support for writing out zip64 archives.</li> <li>Improve speed for <code>ClassPool.contains</code> method.</li> </ul>"},{"location":"releasenotes.html#version-805","title":"Version 8.0.5","text":""},{"location":"releasenotes.html#improved_21","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency to v2.17.1 in response to CVE-2021-44832.</li> <li>Add support for reading and writing Kotlin 1.6 metadata.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_9","title":"Bug fixes","text":"<ul> <li>Fix <code>CallResolver</code> erroneously creating call edges to unimplemented interface methods.</li> <li>Make the <code>DominatorCalculator</code> skip methods with an empty <code>CodeAttribute</code>.</li> <li>Prevent updating Kotlin function names with mangled JVM method names in <code>ClassReferenceFixer</code>.</li> <li>Initialize Kotlin default implementation classes of annotation classes correctly in <code>ClassReferenceInitializer</code>.</li> <li>Correctly initialize Java Record component attributes in <code>ClassReferenceInitializer</code>.</li> </ul>"},{"location":"releasenotes.html#api-changes_10","title":"API changes","text":"<ul> <li><code>KotlinInterfaceToDefaultImplsClassVisitor</code> replaced by <code>KotlinClassToDefaultImplsClassVisitor</code>.</li> <li>Deprecate Kotlin class metadata flag <code>IS_INLINE</code> and replaced with <code>IS_VALUE</code>.</li> <li>Convert to/from Kotlin unsigned integers in Kotlin annotation unsigned type arguments.</li> <li>Initialize array dimension in Kotlin annotation <code>ClassValue</code> type arguments.</li> <li>Add support for Kotlin inline class underlying type to Kotlin metadata model.</li> <li>Add support to <code>MemberDescriptorReferencedClassVisitor</code> for visiting referenced Kotlin inline class parameters.</li> </ul>"},{"location":"releasenotes.html#version-804","title":"Version 8.0.4","text":""},{"location":"releasenotes.html#improved_22","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency to v2.17 in response to CVE-2021-45105.</li> </ul>"},{"location":"releasenotes.html#api-improvements_5","title":"API Improvements","text":"<ul> <li>Add <code>KotlinMetadataVersionFilter</code> to filter classes based on the version of the attached metadata.</li> </ul>"},{"location":"releasenotes.html#version-803","title":"Version 8.0.3","text":""},{"location":"releasenotes.html#improved_23","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency in response to CVE-2021-45046.</li> </ul>"},{"location":"releasenotes.html#version-802","title":"Version 8.0.2","text":""},{"location":"releasenotes.html#improved_24","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency in response to CVE-2021-44228.</li> </ul>"},{"location":"releasenotes.html#api-improvements_6","title":"API Improvements","text":"<ul> <li>Add call resolving and graph traversal features to enable interprocedural control flow analyses.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_10","title":"Bug fixes","text":"<ul> <li>Fix potential <code>StringIndexOutOfBoundsException</code> while trimming attribute value spaces in <code>SignedJarWriter</code>.</li> <li>Fix <code>referencedClass</code> of Values generated by the <code>ExecutingInvocationUnit</code>.</li> <li>Fix potential <code>StackOverflowError</code> when using an <code>AttributeVisitor</code> to visit runtime invisible type annotations.</li> <li>Fix potential <code>StringIndexOutOfBoundsException</code> in <code>KotlinCallableReferenceInitializer</code>.</li> <li>Fix potential <code>NullPointerException</code> in <code>KotlinInterClassPropertyReferenceInitializer</code>.</li> <li>Fix wrong offset for complementary branch instruction when widening branch instructions in <code>InstructionWriter</code>.</li> <li>Fix potential <code>ClassFormatError</code> due to adding multiple annotation attributes when processing Kotlin code.</li> <li>Fix potential <code>NullPointerException</code> due to missing classes in <code>ClassReferenceInitializer</code>.</li> <li>Prevent making package-private final methods that are shadowed protected.</li> </ul>"},{"location":"releasenotes.html#version-801","title":"Version 8.0.1","text":""},{"location":"releasenotes.html#api-improvements_7","title":"API Improvements","text":"<ul> <li>Add <code>LibraryClassBuilder</code> and <code>LibraryClassEditor</code> classes to create and edit a <code>LibraryClass</code>.</li> <li>Add additional constructors to <code>LibraryClass</code>. </li> </ul>"},{"location":"releasenotes.html#bug-fixes_11","title":"Bug fixes","text":"<ul> <li>Fix potential <code>NullPointerException</code> when initializing Kotlin callable references.</li> <li>Prevent requiring <code>--enable-preview</code> on a JVM for Java 16 class files (write class file version <code>60.0</code> instead of <code>60.65535</code>).</li> <li>Fix potential <code>NullPointerException</code> when visiting referenced methods of Kotlin functions.</li> </ul>"},{"location":"releasenotes.html#version-800","title":"Version 8.0.0","text":""},{"location":"releasenotes.html#java-support_7","title":"Java support","text":"<ul> <li>Update maximum supported Java class version to 61.0 (Java 17).</li> </ul>"},{"location":"releasenotes.html#kotlin-support_5","title":"Kotlin support","text":"<ul> <li>Add support for processing Kotlin 1.5 metadata.</li> <li>Update <code>kotlinx</code> metadata dependency to version 0.2.</li> </ul>"},{"location":"releasenotes.html#api-improvements_8","title":"API Improvements","text":"<ul> <li>Add <code>WarningLogger</code> class to allow using a custom Log4j2 logger.</li> <li>Add Kotlin metadata model classes and visitors for Kotlin annotations.</li> <li>Add Kotlin metadata model enum for <code>KmVariance</code>.</li> <li>Add Kotlin metadata model enum for <code>KmVersionRequirement(Kind|Level)</code>.</li> <li>Add Kotlin metadata model enum for <code>KmEffect(Type|InvocationKind)</code>.</li> <li>Add Kotlin metadata flag <code>IS_FUN</code> for functional interfaces.</li> <li>Add Kotlin metadata flag <code>HAS_NON_STABLE_PARAMETER_NAMES</code> for Kotlin callables.</li> <li>Add error handler callback to <code>KotlinMetadataInitializer</code>.</li> <li>Add error handler callback to <code>KotlinMetadataWriter</code>.</li> <li>Add error handler callback to <code>KotlinModuleReader</code>.</li> <li>Add error handler callback to <code>KotlinModuleWriter</code>. Add Kotlin metadata flag <code>IS_SECONDARY</code> for constructors.</li> <li>Implement <code>ClassVisitor</code> in <code>KotlinMetadataInitializer</code> to allow easier initialization of Kotlin metadata.</li> <li>Implement <code>ClassVisitor</code> in <code>KotlinMetadataWriter</code> to allow easier writing of Kotlin metadata.</li> </ul>"},{"location":"releasenotes.html#api-changes_11","title":"API changes","text":"<ul> <li><code>KotlinTypeParameterVistor#visitClassParameter(Clazz, KotlinMetadata, KotlinTypeParameterMetadata)</code> now has the correct signature: <code>KotlinTypeParameterVistor#visitClassParameter(Clazz, KotlinClassKindMetadata, KotlinTypeParameterMetadata)</code>. </li> <li>Rename <code>AllKotlinPropertiesVisitor</code> to <code>AllPropertyVisitor</code>.</li> <li>Rename <code>AllConstructorsVisitor</code> to <code>AllConstructorVisitor</code>.</li> <li>Rename <code>AllFunctionsVisitor</code> to <code>AllFunctionVisitor</code>.</li> <li>Remove `KotlinValueParameterVisitor.onNewFunctionStart()' method.</li> <li>Deprecate Kotlin metadata flag <code>IS_PRIMARY</code> for constructors.</li> </ul>"},{"location":"releasenotes.html#version-711","title":"Version 7.1.1","text":""},{"location":"releasenotes.html#api-improvements_9","title":"API improvements","text":"<ul> <li>Add <code>KotlinTypeParameterFilter</code> to allow filtering easily when visiting type parameters.</li> <li>Add <code>KotlinValueParameterFilter</code> to allow filtering easily when visiting value parameters.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_12","title":"Bug fixes","text":"<ul> <li>Fix <code>AllTypeParameterVisitor</code> so that it visits type parameters defined in any kind of declaration container.</li> <li>Fix <code>AllTypeParameterVisitor</code> so that it visits type parameters of type aliases.</li> <li>Fix potential <code>NullPointerException</code> when initializing a Kotlin default implementation class that does not contain an initialized <code>jvmSignature</code>.</li> <li>Add missing <code>equals</code> method to <code>ParticularReferenceValue</code>.</li> <li>Fix incorrect handling of <code>InterruptedException</code> in <code>ParallelAllClassVisitor</code>.</li> <li>Fix potential <code>ZipOutput</code> alignment issue when writing large uncompressed zip entries.</li> <li>Fix potential <code>ZipOutput</code> synchronization issue when writing uncompressed zip entries.</li> <li>Fix potential <code>NullPointerException</code> when comparing strings with <code>FixedStringMatcher</code>.</li> <li>Fix potential <code>NullPointerException</code> when comparing strings with <code>MatchedStringMatcher</code>.</li> <li>Fix initialization of Kotlin callable references when using Kotlin &gt;= 1.4.</li> </ul>"},{"location":"releasenotes.html#version-71-june-2021","title":"Version 7.1 (June 2021)","text":""},{"location":"releasenotes.html#java-support_8","title":"Java support","text":"<p>ProGuardCORE 7.1 now supports Java versions 14, 15 and 16:</p> <ul> <li>Add support for reading &amp; writing Java 14, 15 and 16 class files.</li> <li>Add support for Java 14 sealed classes (permitted subclasses attributes).</li> <li>Add support for record attributes (previewed in Java 15/16, targeted for Java 17).</li> </ul>"},{"location":"releasenotes.html#improved-code-analysis","title":"Improved code analysis","text":"<ul> <li>The partial evaluator can now be used to reconstruct the specific values of <code>String</code>, <code>StringBuilder</code> and <code>StringBuffer</code> type objects.    See analyzing code manual page for more information.</li> <li>The partial evaluator will now throw an <code>IncompleteClassHierarchyException</code> instead of   <code>IllegalArgumentException</code> when an incomplete hierarchy is encountered.</li> <li>The partial evaluator will now throw an <code>ExcessiveComplexityException</code> if an instruction is visited more than <code>stopAnalysisAfterNEvaluations</code> times.</li> <li>Potentially throwing <code>ldc</code> instructions are now taken into account during partial evaluation,   improving the accuracy of code analysis.</li> <li>Add support for multiple possible types during partial evaluation.</li> </ul>"},{"location":"releasenotes.html#performance-improvements","title":"Performance improvements","text":"<ul> <li>Improve efficiency of building classes, methods and constant pools.</li> </ul>"},{"location":"releasenotes.html#api-improvements_10","title":"API improvements","text":"<ul> <li>Add <code>ClassRenamer</code> to allow renaming classes and members easily.</li> </ul>"},{"location":"releasenotes.html#bug-fixes_13","title":"Bug fixes","text":"<ul> <li>Add missing method reference in injected static initializer instructions.</li> <li>Add missing dimensions argument to <code>CompactCodeAttributeComposer.multianewarray</code>.</li> <li>Fix potential <code>StackOverflowException</code> when comparing multi-typed reference values.</li> <li>Fix handling of Kotlin nested class names which contain <code>$</code>.</li> <li>Mark <code>Module</code>, <code>ModuleMainClass</code> and <code>ModulePackages</code> attributes as required.</li> <li>Fix potential <code>ClassCastException</code> in <code>ConstructorMethodFilter</code>.</li> <li>Fix potential <code>NullPointerException</code> for module classes in ClassPrinter.</li> <li>Fix storage and alignment of uncompressed zip entries.</li> <li>Fix processing of constant boolean arrays.</li> <li>Fix adding branch instructions with labels in <code>CompactCodeAttributeComposer</code>.</li> <li>Fix handling of array dereferencing in <code>MultiTypedReferenceValue</code>.</li> <li>Fix <code>AllKotlinAnnotationVisitor</code> so that it visits type alias annotations defined in any kind of declaration container.</li> <li>Move initialization of Kotlin declaration container's <code>ownerClassName</code> field from <code>ClassReferenceInitializer</code> to <code>KotlinMetadataInitializer</code>.</li> </ul>"},{"location":"releasenotes.html#version-70-jan-2020","title":"Version 7.0 (Jan 2020)","text":"Version Issue Module Explanation 7.0.1 DGD-2382 CORE Fixed processing of Kotlin 1.4 metadata annotations. 7.0.1 DGD-2390 CORE Fixed storage and alignment of uncompressed zip entries. 7.0.1 DGD-2338 CORE Fixed processing of constant boolean arrays. 7.0.1 CORE Fixed adding branch instructions with labels in CompactCodeAttributeComposer. 7.0.0 CORE Initial release of Kotlin support. 7.0.0 PGD-32 CORE Added support for Java 14 class files. 7.0.0 DGD-1780 CORE Removed dependency on internal sun.security API. 7.0.0 DGD-1800 CORE Fixed obfuscation of functional interfaces with abstract Object methods. 7.0.0 CORE Initial release, extracted from ProGuard."},{"location":"taintcpa.html","title":"Taint analysis with CPA","text":""},{"location":"taintcpa.html#taint-analysis-with-cpa","title":"Taint analysis with CPA","text":"<p>Taint analysis aims for detecting a data flow between taint sources and sinks. Configurable program analysis (CPA) is a formalism suitable for integrating multiple data flow analyses in one tool. Taints can be traced in few simple steps.</p>"},{"location":"taintcpa.html#modeling-the-control-flow","title":"Modeling the control flow","text":"<p>A control flow automaton (CFA) is a graph with nodes being bytecode offsets and edges being instructions or calls connecting them. You can create a CFA from the program class pool:</p> <pre><code>// Create the control flow automaton (CFA).\nJvmCfa cfa = CfaUtil.createInterproceduralCfaFromClassPool(programClassPool);\n</code></pre>"},{"location":"taintcpa.html#defining-taint-sources","title":"Defining taint sources","text":"<p>Every taint analysis data flow starts from a taint source. Any Java method can be a taint source. You have several options of how a taint source can behave. A source may:</p> <ul> <li>taint the calling instance,</li> <li>return the taint,</li> <li>taint its actual parameters of nonprimitive types,</li> <li>taint static fields.</li> </ul> <p>For creating a taint you need its fully qualified name and the expected tainting pattern. Let us create a simple taint source returning a tainted string:</p> <pre><code>// Create a taint source.\nTaintSource source = new TaintSource(\"LMain;source()Ljava/lang/String;\", // the fully qualified name of a source method\nfalse,                              // whether the source taints the calling instance\ntrue,                               // whether the source taints its return\nCollections.emptySet(),             // a set of tainted arguments\nCollections.emptySet());            // a set of tainted global variables\n</code></pre>"},{"location":"taintcpa.html#defining-taint-sinks","title":"Defining taint sinks","text":"<p>Taint sinks are the counterpart of taint sources sensitive to a taint. A taint sink may be sensitive to</p> <ul> <li>the calling instance,</li> <li>actual parameters,</li> <li>static fields.</li> </ul> <p>Given the fully qualified name and the sensitivity model you can straightforwardly create a taint sink like the one sensitive to its only argument:</p> <pre><code>// Create a taint sink.\nJvmTaintSink sink = new JvmTaintSink(\"LMain;sink(Ljava/lang/String;)V\", // the fully qualified name of a sink method\nfalse,                             // whether the sink is sensitive to the calling instance\nCollections.singleton(1),          // a set of sensitive arguments\nCollections.emptySet());           // a set of sensitive global variables\n</code></pre> <p>Note: The argument enumeration for both taint sources and taint sinks starts from one and does not depend on whether the method is static. The calling distance is handled by a separate boolean constructor parameter.</p>"},{"location":"taintcpa.html#setting-up-a-cpa-run","title":"Setting up a CPA run","text":"<p>CPA runs encapsulate the initialization of CPA components and allow configuring the analysis. The CPA run needs to know in which method the analysis needs to start and how deep the call stack for the interprocedural analysis should be. All calls overflowing the stack, as well as all library methods, are approximated intraprocedurally as propagating the taint from their calling instance and arguments into the return value. You can create a CPA run for analyzing <code>Main.main(String args)</code> with an unlimited call stack as follows:</p> <pre><code>// Create the CPA run.\nJvmTaintMemoryLocationBamCpaRun cpaRun = new JvmTaintMemoryLocationBamCpaRun(cfa,                                          // a CFA\nCollections.singleton(source),                // a set of taint sources\nnew MethodSignature(\"Main\",\n\"main\",\n\"([Ljava/lang/String)V\"), // the signature of the main method\n-1,                                           // the maximum depth of the call stack analyzed interprocedurally.\n// 0 means intra-procedural analysis.\n// &lt; 0 means unlimited depth.\nTaintAbstractState.bottom,                    // a cut-off threshold\nCollections.singleton(sink));                 // a collection of taint sinks\n</code></pre>"},{"location":"taintcpa.html#running-the-analysis-and-obtaining-witness-traces","title":"Running the analysis and obtaining witness traces","text":"<p>The analysis execution can be done in a single line together with generating witness traces:</p> <pre><code>// Run the analysis and get witness traces.\nSet&lt;List&lt;JvmMemoryLocation&gt;&gt; traces = cpaRun.extractLinearTraces();\n</code></pre>"},{"location":"taintcpa.html#interpreting-the-analysis-result","title":"Interpreting the analysis result","text":"<p>The result of the analysis is a set of witness traces, if there is a data flow detected. A witness trace is a list of memory locations at specific program locations. For instance, the class below</p> <pre><code>// Run the analysis and get witness traces.\npublic class Main\n{\npublic static void main()\n{\nsink(callee());\n}\n\npublic static String callee()\n{\nreturn source();\n}\n}\n</code></pre> <p>would generate a witness trace consisting of two top stack locations, one after the taint source in <code>callee()</code> and another before the call to <code>sink(String s)</code>:</p> <pre><code>[JvmStackLocation(0)@LMain;main()V:3, JvmStackLocation(0)@LMain;callee()Ljava/lang/String;:3]\n</code></pre> <p>Note that the traces returned by the CPA run go from the taint sink to the taint source. There are four types of memory locations:</p> <ul> <li>stack locations identified by their offsets from the operand stack top,</li> <li>local variable locations identified by their indices in the local variable array,</li> <li>static field locations identified by their fully qualified names,</li> <li>heap locations identified by their abstract references.</li> </ul> <p>Complete example: AnalyzeTaints.java</p>"},{"location":"api/legal/jquery.html","title":"Jquery","text":""},{"location":"api/legal/jquery.html#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"api/legal/jquery.html#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"api/legal/jqueryUI.html","title":"jqueryUI","text":""},{"location":"api/legal/jqueryUI.html#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"api/legal/jqueryUI.html#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"},{"location":"api/legal/jszip.html","title":"Jszip","text":""},{"location":"api/legal/jszip.html#jszip-v371","title":"JSZip v3.7.1","text":"<p>JSZip is dual licensed. You may use it under the MIT license or the GPLv3 license.</p>"},{"location":"api/legal/jszip.html#the-mit-license","title":"The MIT License","text":"<pre><code>Copyright (c) 2009-2016 Stuart Knightley, David Duponchel, Franz Buchinger, Ant\u00f3nio Afonso\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>"},{"location":"api/legal/jszip.html#gpl-version-3","title":"GPL version 3","text":"<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"api/legal/pako.html","title":"Pako","text":""},{"location":"api/legal/pako.html#pako-v10","title":"Pako v1.0","text":""},{"location":"api/legal/pako.html#pako-license","title":"Pako License","text":"<pre>\nCopyright (C) 2014-2017 by Vitaly Puzrin and Andrei Tuputcyn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n(C) 1995-2013 Jean-loup Gailly and Mark Adler\n(C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\n</pre>"}]}