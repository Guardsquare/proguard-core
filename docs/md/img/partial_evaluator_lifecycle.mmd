%% [Mermaid Diagramming and charting tool](https://mermaid.js.org/)
stateDiagram-v2
    L0: Try
    state L0 {
        L1: Evaluate instruction block and branches
        [*] --> startCodeAttribute
        startCodeAttribute --> L1
        state L1 {
            L2: Evaluate single instruction block
            [*] --> L2
            state L2 {
                L3: For each instruction in block
                [*] --> startInstructionBlock
                startInstructionBlock --> L3
                state L3 {
                    BR1: Instruction has been seen in this context?
                    [*] --> BR1
                    BR1 --> [*] : Yes
                    BR2: Already evaluated a lot of times?
                    BR1 --> BR2: No
                    BR2 --> startInstructionEvaluation: No
                    BR2 --> [*]: Yes
                    startInstructionEvaluation --> afterInstructionEvaluation
                    BR3: Branch unit has been called?
                    afterInstructionEvaluation --> BR3
                    BR3 --> BR5 : Yes
                    BR5: #Branch targets > 1?
                    BR5 --> definitiveBranch: No
                    BR5 --> registerAlternativeBranch: Yes
                    registerAlternativeBranch --> registerAlternativeBranch
                    registerAlternativeBranch --> [*]
                    definitiveBranch --> BR6
                    BR6: Instruction was JSR or JSR_W?
                    BR3 --> BR6 : No
                    BR6 --> [*]: No
                    L5: Instruction was subroutine invocation
                    BR6 --> L5: Yes
                    state L5 {
                        [*] --> startSubroutine
                        recursion1: Evaluate all subroutines
                        startSubroutine --> recursion1
                        note left of recursion1: Recursively call back to evaluateInstructionBlockAndExceptionHandlers
                        recursion1 --> generalizeSubroutine
                        generalizeSubroutine --> endSubroutine
                        endSubroutine --> [*]
                    }
                    L5 --> [*]

                }
                L3 --> instructionBlockDone
                instructionBlockDone --> [*]
            }
            L6: For each generated instructionBlock on generated stack
            L2 --> L6
            state L6 {
                evaluateAllBlocksResultingFromBranch --> pop
                pop --> evaluateAllBlocksResultingFromBranch
            }
            L6 --> [*]
        }
        L1 --> startExceptionHandling
        BR7: Exception handler evaluation is needed?
        startExceptionHandling --> BR7
        BR7 --> registerExceptionHandler: Yes
        BR7 --> registerUnusedExceptionHandler: No
        registerExceptionHandler --> evaluationResults
        registerUnusedExceptionHandler --> evaluationResults
        evaluationResults --> [*]
    }
    catch: Did catch?
    L0 --> catch
    catch -->  [*]: No
    catch --> registerMethodLevelError: Yes
    registerMethodLevelError --> [*]