plugins {
    id 'distribution'
    id 'io.github.gradle-nexus.publish-plugin'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.guardsquare'
version = proguardCoreVersion

repositories {
    mavenCentral()
}

sourceSets.main {
    java {
        srcDirs = ['src']
    }
    resources {
        srcDirs = ['src']
        include '**/*.properties'
        include '**/*.gif'
        include '**/*.png'
        include '**/*.pro'
    }
}

javadoc {
    title          = 'ProGuardCORE'
    source         = sourceSets.main.allJava
    destinationDir = file('docs/md/api')
    options.addStringOption('Xdoclint:none', '-quiet')
}

task buildDocumentation(type: Exec) {
    dependsOn javadoc
    inputs.dir 'docs/md'
    inputs.file 'docs/mkdocs.yml'
    outputs.dir 'docs/html'
    executable 'sh'
    args '-c', "docker run --volume $rootDir/docs:/docs --rm squidfunk/mkdocs-material:5.2.2 build"
}

clean {
    delete javadoc.outputs
    delete buildDocumentation.outputs
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    api "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}"
    api "org.jetbrains.kotlinx:kotlinx-metadata-jvm:${kotlinxMetadataVersion}"
}

java {
    sourceCompatibility = JavaVersion.toVersion("${target}")
    targetCompatibility = JavaVersion.toVersion("${target}")
    withSourcesJar()
    withJavadocJar()
}

distributions {
    main {
        distributionBaseName.set('proguard-core')
        contents {
            into('docs') {
                from('docs/md') {
                    includeEmptyDirs = false
                    include '**/*.md'
                }
            }
            from(rootDir) {
                include 'examples/'
                include 'LICENSE'
            }
        }
    }
}

distTar {
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('PROGUARD_STAGING_USERNAME')
            password = findProperty('PROGUARD_STAGING_PASSWORD')
        }
    }
}

publishing {
    publications {
        create('proguardCore', MavenPublication) {
            from components.java
            pom {
                name = "$groupId:$artifactId"
                description = 'ProGuardCORE is a free library to read, analyze, modify, and write Java class files.'
                url = 'https://guardsquare.github.io/proguard-core'
                developers {
                    developer {
                        id = 'lafortune'
                        name = 'Eric Lafortune'
                        organization = 'Guardsquare'
                        organizationUrl = 'https://www.guardsquare.com/'
                        roles = ['Project Administrator', 'Developer']
                    }
                }
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                issueManagement {
                    system = 'Github Tracker'
                    url = 'https://github.com/Guardsquare/proguard-core/issues'
                }
                scm {
                    url = 'https://github.com/Guardsquare/proguard-core.git'
                    connection = 'scm:git:https://github.com/Guardsquare/proguard-core.git'
                }
                properties = [
                        'project.build.sourceEncoding': 'UTF-8'
                ]
            }
        }
    }
    repositories {
        maven {
            name = 'Github'
            url = uri('https://maven.pkg.github.com/guardsquare/proguard-core')
            credentials {
                username = project.findProperty('PROGUARD_GITHUB_USERNAME')
                password = project.findProperty('PROGUARD_GITHUB_TOKEN')
            }
        }
    }
}

// We use in-memory ascii-armored keys
// See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
if (hasProperty('PROGUARD_SIGNING_KEY')) {
    signing {
        String key = findProperty('PROGUARD_SIGNING_KEY')
        String password = findProperty('PROGUARD_SIGNING_PASSWORD')
        useInMemoryPgpKeys(key, password)
        sign publishing.publications.proguardCore
    }
}

