plugins {
    id 'distribution'
    id 'io.github.gradle-nexus.publish-plugin'
    id 'signing'
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
    id 'com.adarshr.test-logger' version '3.0.0' apply false
    id 'de.jansauer.printcoverage' version '2.0.0' apply false
    id "org.sonarqube" version "3.4.0.2513"
    id "io.freefair.aggregate-javadoc" version "6.5.0.3"
    id "org.jlleitschuh.gradle.ktlint" version "10.3.0" apply false
}

allprojects {
    group = 'com.guardsquare'
    version = proguardCoreVersion

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    
    pluginManager.withPlugin('java') {
        java {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(8))
            }
            withJavadocJar()
            withSourcesJar()
        }

        javadoc {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs = ["-opt-in=kotlin.RequiresOptIn"]
        }
    }
}

aggregateJavadoc {
    title          = 'ProGuardCORE'
    destinationDir = file('docs/md/api')
    options.addStringOption('Xdoclint:none', '-quiet')
}

task buildDocumentation(type: Exec) {
    dependsOn aggregateJavadoc
    inputs.dir 'docs/md'
    inputs.file 'docs/mkdocs.yml'
    outputs.dir 'docs/html'
    executable 'sh'
    args '-c', "docker run --volume $rootDir/docs:/docs --rm squidfunk/mkdocs-material:5.2.2 build"
}

clean {
    delete aggregateJavadoc.outputs
    //delete buildDocumentation.outputs
}

distributions {
    main {
        distributionBaseName.set('proguard-core')
        contents {
            into('lib') {
                from tasks.getByPath(":proguard-core:jar").outputs
            }
            into('docs') {
                from('docs/md') {
                    includeEmptyDirs = false
                    include '**/*.md'
                }
            }
            from(rootDir) {
                include 'examples/'
                include 'LICENSE'
            }
        }
    }
}

distTar {
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
    dependsOn('aggregateJavadoc')
}

distZip {
    dependsOn('aggregateJavadoc')
}

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('PROGUARD_STAGING_USERNAME')
            password = findProperty('PROGUARD_STAGING_PASSWORD')
        }
    }
}
