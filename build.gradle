import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'distribution'
	id 'signing'
	alias(libs.plugins.kotlin.plugin) apply false
	alias(libs.plugins.spotless)
	alias(libs.plugins.nexus.publish)
	alias(libs.plugins.test.logger) apply false
	alias(libs.plugins.sonarqube)
	alias(libs.plugins.aggregate.javadoc)
}

allprojects {
	group = 'com.guardsquare'
	version = proguardCoreVersion

	repositories {
		mavenCentral()
		google()
	}

	pluginManager.withPlugin('java') {
		java {
			toolchain {
				languageVersion.set(JavaLanguageVersion.of(8))
			}
			withJavadocJar()
			withSourcesJar()
		}

		javadoc {
			options.addStringOption('Xdoclint:none', '-quiet')
		}

		spotless {
			java {
				importOrder()
				googleJavaFormat()
				endWithNewline()
			}
		}
	}

	pluginManager.withPlugin('kotlin') {
		spotless {
			kotlin {
				ktlint()
				endWithNewline()
			}
		}
	}

	tasks.withType(KotlinCompile).configureEach {
		kotlinOptions {
			jvmTarget = '1.8'
			freeCompilerArgs = [
				"-opt-in=kotlin.RequiresOptIn"
			]
		}
	}
	tasks.withType(KotlinCompilationTask.class)
			.configureEach {
				compilerOptions.languageVersion = KotlinVersion.KOTLIN_1_8
			}

	apply plugin: 'com.diffplug.spotless'

	spotless {
		groovyGradle {
			greclipse()
			endWithNewline()
			toggleOffOn('formatter:off', 'formatter:on')
		}
	}
}

dependencies {
	rootProject.subprojects { subproject ->
		subproject.plugins.withId("java") {
			javadoc subproject
		}
	}
}

javadoc {
	title          = 'ProGuardCORE'
	destinationDir = file('docs/md/api')
	options.addStringOption('Xdoclint:none', '-quiet')
}

def buildDocumentation = tasks.register("buildDocumentation", Exec) {
	dependsOn javadoc
	inputs.dir 'docs/md'
	inputs.file 'docs/mkdocs.yml'
	outputs.dir 'docs/html'
	executable 'sh'
	args '-c', "docker run --volume $rootDir/docs:/docs --rm squidfunk/mkdocs-material:9.1.19 build"
}

clean {
	delete javadoc.outputs
	//delete buildDocumentation.outputs
}

distributions {
	main {
		distributionBaseName.set('proguard-core')
		contents {
			into('lib') {
				from tasks.getByPath(":proguard-core:jar").outputs
			}
			into('docs') {
				from('docs/md') {
					includeEmptyDirs = false
					include '**/*.md'
				}
			}
			from(rootDir) {
				include 'examples/'
				exclude 'examples/build'
				exclude 'examples/.gradle'
				exclude 'examples/.idea'
				include 'LICENSE'
			}
		}
	}
}

distTar {
	compression = Compression.GZIP
	archiveExtension.set('tar.gz')
	dependsOn('javadoc')
}

distZip {
	dependsOn('javadoc')
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl = uri("https://ossrh-staging-api.central.sonatype.com/service/local/")
			username = findProperty('PROGUARD_STAGING_USERNAME')
			password = findProperty('PROGUARD_STAGING_PASSWORD')
		}
	}
}
