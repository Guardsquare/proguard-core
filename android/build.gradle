allprojects  {
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    group = 'com.guardsquare'
//    group = 'proguard-core-android'
    version = '2.1-SNAPSHOT'
}

defaultTasks('clean','distZip')

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task packageSources(type: Jar) {
        if (!getTasksByName('generateGrammarSource', false).empty) {
            dependsOn(generateGrammarSource)
        }
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
    artifacts.archives packageSources
    repositories {
        mavenCentral()
    }

// == support provided scope
    configurations {
        provided
    }
    sourceSets {
        main { compileClasspath += configurations.provided }
        test {
            compileClasspath += configurations.provided
        }
    }
// == end

    [compileJava, compileTestJava]*.options.collect {options ->options.encoding = 'UTF-8'}
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    compileTestJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

    dependencies {
        implementation 'com.guardsquare:proguard-core:9.0.1'
        testImplementation group: 'junit', name: 'junit', version:'4.11'
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Version": project.version,
                    "Revision":"${getRevision()}",
                    "Build-Number": System.env.BUILD_NUMBER?System.env.BUILD_NUMBER:"-1",
            )
        }
        from (project.parent.projectDir)  {
            include 'NOTICE.txt'
            include 'LICENSE.txt'
            into('META-INF')
        }
    }
}

def getRevision() {
    if (System.env.BUILD_REVISION) {
        return System.env.BUILD_REVISION
    }
    if (System.env.GIT_REVISION) {
        return System.env.GIT_REVISION
    }
    if (System.env.MERCURIAL_REVISION) {
        System.env.MERCURIAL_REVISION
    }

    def ver = null;
    try {
        ver = 'git rev-parse --short HEAD'.execute().text.trim()
    } catch (e) {
        // ignore
    }
    if (!ver) {
        try {
            ver = 'hg id -i -b -t'.execute().text.split(' ')[0];
        } catch (e) {
            // ignore
        }
    }
    if (!ver) {
        ver = "HEAD"
    }
    return ver
}
