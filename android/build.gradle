plugins {
    id 'distribution'
    id 'java-library'
    id 'java-test-fixtures'
    id "org.jetbrains.kotlin.jvm"
    id 'maven-publish'
    id 'signing'
    id 'com.adarshr.test-logger'
    id 'de.jansauer.printcoverage'
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint"
    id "org.sonarqube"
}

dependencies {
    api project(":proguard-core")

    testImplementation(testFixtures(project(":proguard-core")))
    testFixturesImplementation(testFixtures(project(":proguard-core")))

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.3.1' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.3.1' // for kotest core jvm assertions
    testImplementation 'io.kotest:kotest-property-jvm:5.3.1' // for kotest property test
    testImplementation 'io.kotest:kotest-framework-datatest:5.3.1'
    testImplementation "io.mockk:mockk:1.12.4" // for mocking
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1' // for junit framework
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1' // for junit framework

    testFixturesImplementation 'org.smali:smali:2.5.2'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'proguard-core-android'
            from components.java
            pom {
                description = 'ProGuardCORE is a free library to read, analyze, modify, and write Java class files.'
                url = 'https://guardsquare.github.io/proguard-core'
                developers {
                    developer {
                        id = 'lafortune'
                        name = 'Eric Lafortune'
                        organization = 'Guardsquare'
                        organizationUrl = 'https://www.guardsquare.com/'
                        roles = ['Project Administrator', 'Developer']
                    }
                }
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                issueManagement {
                    system = 'Github Tracker'
                    url = 'https://github.com/Guardsquare/proguard-core/issues'
                }
                scm {
                    url = 'https://github.com/Guardsquare/proguard-core.git'
                    connection = 'scm:git:https://github.com/Guardsquare/proguard-core.git'
                }
                properties = [
                        'project.build.sourceEncoding': 'UTF-8'
                ]
            }
            repositories {
                maven {
                    name = 'Github'
                    url = uri('https://maven.pkg.github.com/guardsquare/proguard-core')
                    credentials {
                        username = project.findProperty('PROGUARD_GITHUB_USERNAME')
                        password = project.findProperty('PROGUARD_GITHUB_TOKEN')
                    }
                }
            }
        }
    }
}

// We use in-memory ascii-armored keys
// See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
if (hasProperty('PROGUARD_SIGNING_KEY')) {
    signing {
        String key = findProperty('PROGUARD_SIGNING_KEY')
        String password = findProperty('PROGUARD_SIGNING_PASSWORD')
        useInMemoryPgpKeys(key, password)
        sign publishing.publications
    }
}

